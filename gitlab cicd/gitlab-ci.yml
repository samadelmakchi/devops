image: python:3.9

stages:
  - build
  - analysis
  - deploy_dev
  - functional_testing
  - non_functional_testing
  - deploy_test
  - docker_build
  - push_to_nexus
  - deploy_product

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Build
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build_job:
  stage: build
  script:
    # - python -m venv venv
    # - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pytest pytest-cov selenium locust pylint newman requests
  artifacts:
    paths:
      - .venv/
  only:
    - dev
    - test
    - main

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Analysis
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sonar_analysis: # SonarQube
  stage: analysis
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - sonar-scanner -Dsonar.projectKey=your_project_key \
                   -Dsonar.sources=. \
                   -Dsonar.host.url=http://your_sonarqube_server:9000 \
                   -Dsonar.login=$SONAR_TOKEN
  allow_failure: true
  only:
    - dev
    - test
    - main

  # sonar.projectKey: کلید پروژه‌ای که در SonarQube ایجاد شده
  # sonar.sources: مسیری که کدهای منبع در آن قرار دارند. در اینجا به صورت . تنظیم شده تا کل پروژه را شامل شود
  # sonar.host.url: آدرس سرور SonarQube
  # sonar.login: توکن ورود به SonarQube که باید به عنوان متغیر محیطی (SONAR_TOKEN) در GitLab تنظیم شود
  # GitLab > Settings > CI / CD > Variables > Add SONAR_TOKEN whit token value

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
check_lint: # Pylint
  stage: analysis
  script:
    - pylint tests/ api/ > pylint_results.txt || exit 0 
  artifacts:
    when: always
    paths:
      - pylint_results.txt
  allow_failure: true
  only:
    - dev
    - test
    - main
  # Check all code in directory "tests" And "api"
  # Use "exit 0" so that the pipeline does not stop if there are warnings

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Deploy Dev (Docker Compose)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
deploy_dev_job:
  stage: deploy_dev
  image: docker/compose:latest
  environment:
    name: production
    url: http://your-server-url
  script:
    - scp -o StrictHostKeyChecking=no docker-compose.yml user@your-server:/path/to/docker-compose.yml
    - ssh user@your-server "cd /path/to && docker-compose pull && docker-compose up -d"
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Functional Testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
unit_test_job: # Unit Test
  stage: functional_testing
  script:
    - python -m pytest tests/unit > unit_test_results.txt || exit 0
  artifacts:
    when: always
    paths:
      - unit_test_results.txt
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
integration_test_job: # Integration Test
  stage: functional_testing
  script:
    - python -m pytest tests/integration --junitxml=integration_test_results.xml
  artifacts:
    reports:
      junit: integration_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ui_test_job: # User Interface Test
  stage: functional_testing
  image: selenium/standalone-chrome
  services:
    - selenium/standalone-chrome
  script:
    - python -m pytest tests/ui --junitxml=ui_test_results.xml
  artifacts:
    reports:
      junit: ui_test_results.xml
    paths:
      - screenshots/
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
regression_test_job: # Regression Test
  stage: functional_testing
  image: selenium/standalone-chrome
  services:
    - selenium/standalone-chrome
  script:
    - python -m pytest tests/regression --junitxml=regression_test_results.xml
  artifacts:
    when: always
    reports:
      junit: regression_test_results.xml
    paths:
      - regression_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
smoke_test_job: # Smoke Test
  stage: functional_testing
  script:
    - python -m pytest tests/smoke --junitxml=smoke_test_results.xml
  artifacts:
    reports:
      junit: smoke_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
recovery_test_job: # Recovery Test
  stage: functional_testing
  script:
    - python -m pytest tests/recovery --junitxml=recovery_test_results.xml
  artifacts:
    reports:
      junit: recovery_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
black_box_test_job: # Black Box Test 
  stage: functional_testing
  script:
    - python -m pytest tests/black_box --junitxml=black_box_test_results.xml
  artifacts:
    reports:
      junit: black_box_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
white_box_test_job: # White Box Test
  stage: functional_testing
  script:
    - python -m pytest --cov=my_python_project tests/white_box --junitxml=white_box_test_results.xml
  artifacts:
    reports:
      junit: white_box_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
system_test_job: # System Test
  stage: functional_testing
  script:
    - python -m pytest tests/system --junitxml=system_test_results.xml
  artifacts:
    reports:
      junit: system_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
acceptance_test_job: # Acceptance Test
  stage: functional_testing
  script:
    - python -m pytest tests/acceptance --junitxml=acceptance_test_results.xml
  artifacts:
    reports:
      junit: acceptance_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
migration_test_job: # Migration Test
  stage: functional_testing
  script:
    - python -m pytest tests/migration --junitxml=migration_test_results.xml
  artifacts:
    reports:
      junit: migration_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
api_test_job: # API Test
  stage: functional_testing
  script:
    - python -m pytest tests/api --junitxml=api_test_results.xml
  artifacts:
    reports:
      junit: api_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
accessibility_test_job: # Accessibility Test
  stage: functional_testing
  image: node:latest
  script:
    - npm install -g pa11y
    - pa11y http://your-app-url > accessibility_test_report.txt
  artifacts:
    paths:
      - accessibility_test_report.txt
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Non Functional Testing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compatibility_test_job: # Compatibility Test
  stage: non_functional_testing
  image: selenium/standalone-chrome
  script:
    - python -m pytest tests/compatibility --junitxml=compatibility_test_results.xml
  artifacts:
    reports:
      junit: compatibility_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
reliability_test_job: # Reliability Test
  stage: non_functional_testing
  script:
    - python -m pytest tests/reliability --junitxml=reliability_test_results.xml
  artifacts:
    reports:
      junit: reliability_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
globalization_localization_test_job: # Globalization and Localization Test 
  stage: non_functional_testing
  script:
    - python -m pytest tests/globalization_localization --junitxml=globalization_localization_test_results.xml
  artifacts:
    reports:
      junit: globalization_localization_test_results.xml
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
performance_test_job: # Performance Test
  stage: non_functional_testing
  script:
    - locust -f test/performance/test_performance.py --headless -u 100 -r 10 --run-time 1m --csv=performance_test_results
  artifacts:
    paths:
      - performance_test_results/
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scalability_test_job: # Scalability Test
  stage: non_functional_testing
  script:
    - locust -f test/scalability/test_scalability.py --headless -u 1000 -r 100 --run-time 10m --csv=scalability_test_results
  artifacts:
    paths:
      - scalability_test_results/
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
endurance_test_job: # Endurance Test
  stage: non_functional_testing
  script:
    - locust -f test/endurance/test_endurance.py --headless -u 500 -r 50 --run-time 12h --csv=endurance_test_results
  artifacts:
    paths:
      - endurance_test_results/
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
load_test_job: # Load Test
  stage: non_functional_testing
  script:
    - locust -f test/load/test_load.py --headless -u 500 -r 50 --run-time 1h --csv=load_test_results
  artifacts:
    paths:
      - load_test_results/
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stress_test_job: # Stress Test
  stage: non_functional_testing
  script:
    - locust -f test/stress/test_stress.py --headless -u 1000 -r 200 --run-time 30m --csv=stress_test_results
  artifacts:
    paths:
      - stress_test_results/
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
security_test_job: # Security Test
  stage: non_functional_testing
  image: owasp/zap2docker-stable
  script:
    - python3 zap-baseline.py
  artifacts:
    when: always
    paths:
      - security_test_report.html
  allow_failure: true
  only:
    - dev

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Docker Build Product                                                                                        >> If Quality Assurance (QA) Test Is OK
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker_build_job:
  stage: docker_build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t my_project:$CI_COMMIT_SHORT_SHA .
    - docker tag my_project:$CI_COMMIT_SHORT_SHA nexus.elmakchi.ir/repository/docker-hosted/my_project:$CI_COMMIT_SHORT_SHA
  artifacts:
    paths:
      - docker/
  only:
    - main

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Push to Nexus
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
push_to_nexus_job:
  stage: push_to_nexus
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker push nexus.elmakchi.ir/repository/docker-hosted/my_project:$CI_COMMIT_SHORT_SHA
  only:
    - main

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Deploy Product (Docker Compose)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
deploy_product_job:
  stage: deploy_product
  image: docker/compose:latest
  environment:
    name: production
    url: http://your-server-url
  script:
    - scp -o StrictHostKeyChecking=no docker-compose.yml user@your-server:/path/to/docker-compose.yml
    - ssh user@your-server "cd /path/to && docker-compose pull && docker-compose up -d"
  only:
    - main

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~