    # تعریف پروژه‌ها و متادیتای هر کدام
    - name: Define project repositories
      ansible.builtin.set_fact:
        projects:
          - name: "gateway"
            repo: "git@gitlab.com:nasser-man/calibri.git"
            folder: "gateway"
            branch_var: "customer_gateway_git_branches"
            tag_var: "customer_gateway_git_tags"
            compose_file: "docker-compose-gateway.yml.j2"
          - name: "portal"
            repo: "git@gitlab.com:nasser-man/calibri-portal.git"
            folder: "portal"
            branch_var: "customer_portal_git_branches"
            tag_var: "customer_portal_git_tags"
            compose_file: "docker-compose-portal.yml.j2"
          - name: "portal-frontend"
            repo: "git@gitlab.com:nasser-man/calibri-portal-frontend.git"
            folder: "portal-frontend"
            branch_var: "customer_portal_frontend_git_branches"
            tag_var: "customer_portal_frontend_git_tags"
            compose_file: "docker-compose-portal-frontend.yml.j2"

    # بررسی وجود دایرکتوری git
    - name: Check if shared 'git' directory exists
      ansible.builtin.stat:
        path: "{{ project_path }}/git"
      register: git_dir_check

    # ساخت دایرکتوری git در صورت نیاز
    - name: Ensure 'git' directory exists
      ansible.builtin.file:
        path: "{{ project_path }}/git"
        state: directory
        mode: '0777'

    # کلون کردن ریپازیتوری‌ها فقط اگر git هنوز وجود ندارد
    - name: Clone repositories (first ever deploy)
      ansible.builtin.shell: |
        GIT_SSH_COMMAND="ssh -i {{ playbook_dir }}/id_rsa -o StrictHostKeyChecking=no" \
        git clone -b {{ vars[item.branch_var] | default('master') }} {{ item.repo }} {{ project_path }}/git/{{ item.folder }}
      args:
        creates: "{{ project_path }}/git/{{ item.folder }}"
      loop: "{{ projects }}"
      poll: 1
      when: not git_dir_check.stat.exists and inventory_hostname == 'localhost'

    # Pull کردن آخرین تغییرات اگر git وجود داشته باشد
    - name: Pull repositories (subsequent runs)
      ansible.builtin.shell: |
        cd {{ project_path }}/git/{{ item.folder }}
        git config user.email "devops@example.com"
        git config user.name "CI/CD Bot"
        GIT_SSH_COMMAND="ssh -i {{ playbook_dir }}/id_rsa -o StrictHostKeyChecking=no" \
        git pull --no-rebase origin {{ vars[item.branch_var] | default('master') }}
      loop: "{{ projects }}"
      when: git_dir_check.stat.exists and inventory_hostname == 'localhost'
      register: git_pull_result
      poll: 1
      changed_when: "'Already up to date' not in git_pull_result.stdout"

    # حذف فایل lock احتمالی
    - name: Remove git index.lock if exists
      ansible.builtin.file:
        path: "{{ project_path }}/git/{{ item.folder }}/.git/index.lock"
        state: absent
      loop: "{{ projects }}"
      delegate_to: localhost

    # Checkout کردن تگ اختصاصی برای هر پروژه (قبل از کپی کردن)
    - name: Checkout specific tag or branch for each project
      ansible.builtin.shell: |
        cd "{{ project_path }}/git/{{ item.folder }}"
        GIT_SSH_COMMAND="ssh -i {{ playbook_dir }}/id_rsa -o StrictHostKeyChecking=no" \
        git fetch --all --tags
        GIT_SSH_COMMAND="ssh -i {{ playbook_dir }}/id_rsa -o StrictHostKeyChecking=no" \
        git checkout "{{ hostvars[inventory_hostname][item.tag_var] }}"
      loop: "{{ projects }}"
      when: customer_state == 'update'
      delegate_to: localhost
      run_once: false
      poll: 1
      changed_when: false

    # بررسی وجود دایرکتوری مشتری
    - name: Check if customer base folder exists
      ansible.builtin.stat:
        path: "{{ project_path }}/{{ inventory_hostname }}"
      register: customer_base_dir
      when: customer_state == 'update'

    # ساخت دایرکتوری مشتری در صورت نیاز
    - name: Ensure customer base folder exists
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}"
        state: directory
        mode: '0777'
      when: customer_state == 'update'

    # کپی پروژه‌ها از git به مسیر مشتری، بدون .git
    - name: Copy all repositories for each customer (excluding .git)
      ansible.posix.synchronize:
        src: "{{ project_path }}/git/"
        dest: "{{ project_path }}/{{ item }}/"
        mode: push
        rsync_opts:
          - "--exclude=.git"
      loop: "{{ groups['all'] }}"
      delegate_to: localhost
      run_once: false

    # تنظیم پرمیشن برای هر پروژه
    - name: Set permissions to 0777 for copied repositories
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}"
        state: directory
        mode: '0777'
      loop: "{{ projects }}"
      when: customer_state == 'update'

    # کپی کردن فایل docker-compose اختصاصی
    - name: Copy docker-compose files to customer project
      ansible.builtin.template:
        src: "template/{{ item.compose_file }}"
        dest: "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}/docker/docker-compose.yml"
        mode: '0777'
      loop: "{{ projects }}"
      when: customer_state == 'update'













    # کپی پروژه‌ها از git به مسیر مشتری، با .git
    - name: Copy each repository to customer folder (with .git)
      ansible.builtin.copy:
        src: "{{ project_path }}/git/"
        dest: "{{ project_path }}/{{ inventory_hostname }}/"
        remote_src: false
        mode: '0777'
      loop: "{{ projects }}"
      when: customer_state == 'update'