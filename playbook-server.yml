# کانفیگ و نصب ابزارهای سرور
- name: Configuring and installing server tools
  hosts: localhost
  become: true

  tasks:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ساخت پوشه برنامه
    # 📁 ایجاد پوشه project_path اگر وجود نداشت
    - name: "📁 Ensure project_path directory exists"
      ansible.builtin.file:
        path: "{{ project_path }}"
        state: directory
        mode: '0777'
      poll: 1

    # 🛠️ اطمینان حاصل کنید که فهرست ابزارها وجود دارد
    - name: "🛠️ Ensure tools directory exists"
      ansible.builtin.file:
        path: "tools"
        state: directory
        mode: '0777'
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ فعال سازی شکن
    # 🌐 پیکربندی DNS سرویس Shecan در resolved.conf
    - name: "🌐 Configure Shecan DNS in resolved.conf"
      ansible.builtin.copy:
        content: |
          # This file is part of systemd.
          #
          # systemd is free software; you can redistribute it and/or modify it
          # under the terms of the GNU Lesser General Public License as published by
          # the Free Software Foundation; either version 2.1 of the License, or
          # (at your option) any later version.

          [Resolve]
          DNS=178.22.122.100 185.51.200.2
          FallbackDNS=8.8.8.8
          #Domains=
          #LLMNR=yes
          #MulticastDNS=yes
          #DNSSEC=no
          #DNSOverTLS=no
          #Cache=yes
          #DNSStubListener=yes
          #ReadEtcHosts=yes
        dest: /etc/systemd/resolved.conf
        mode: '0644'
      poll: 1

    # 🔄 ریستارت سرویس systemd-resolved
    - name: "🔄 Restart systemd-resolved service"
      ansible.builtin.systemd:
        name: systemd-resolved
        state: restarted
      poll: 1

    # 🔗 ایجاد لینک سمبلیک برای /etc/resolv.conf به /run/systemd/resolve/resolv.conf
    - name: "🔗 Create symbolic link for /etc/resolv.conf"
      ansible.builtin.file:
        src: /run/systemd/resolve/resolv.conf
        dest: /etc/resolv.conf
        state: link
        force: true
      poll: 1

    # 🛠 تنظیم دستی DNSهای Shecan در /etc/resolv.conf (در صورت نیاز)
    - name: "🛠 Manually set Shecan DNS in /etc/resolv.conf"
      ansible.builtin.copy:
        content: |
          nameserver 178.22.122.100
          nameserver 185.51.200.2
        dest: /etc/resolv.conf
        mode: '0644'
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Traefik
    - name: "🛣️ Create traefik_reverse_proxy Docker network"
      community.docker.docker_network:
        name: traefik_reverse_proxy
        state: present
      poll: 1
      when: install_traefik is true

    - name: "🛣️ Generate traefik.yml from template"
      ansible.builtin.template:
        src: template/traefik.yml.j2
        dest: tools/traefik.yml
        owner: root
        group: root
        mode: '0644'
        force: yes
      poll: 1
      when: install_traefik is true

    - name: "🛣️ Set up Traefik using Docker Compose"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - traefik.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_traefik is true

    - name: "🛣️ Check if traefik.yml file exists"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/traefik.yml"
      poll: 1
      register: traefik_file

    - name: "🛣️ Tear down traefik container if install_traefik is false"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - traefik.yml
        state: absent
      poll: 1
      when: install_traefik is false and traefik_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Portainer
    - name: "🐳 Generate portainer.yml from template"
      ansible.builtin.template:
        src: template/portainer.yml.j2
        dest: tools/portainer.yml
        owner: root
        group: root
        mode: '0644'
        force: yes
      poll: 1
      when: install_portainer is true

    - name: "🐳 Set up Portainer using Docker Compose"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - portainer.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_portainer is true

    - name: "🐳 Check if portainer.yml file exists"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/portainer.yml"
      poll: 1
      register: portainer_file

    - name: "🐳 Tear down Portainer container if install_portainer is false"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - portainer.yml
        state: absent
      poll: 1
      when: install_portainer is false and portainer_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Jenkins
    - name: "♻️ Generate jenkins.yml from template"
      ansible.builtin.template:
        src: template/jenkins.yml.j2
        dest: tools/jenkins.yml
        owner: root
        group: root
        mode: '0644'
        force: yes
      poll: 1
      when: install_jenkins is true

    - name: "♻️ Ensure traefik_reverse_proxy network exists"
      community.docker.docker_network:
        name: traefik_reverse_proxy
        state: present
      when: install_jenkins is true

    - name: "♻️ Set up Jenkins using Docker Compose"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - jenkins.yml
        state: present
        pull: missing
        recreate: auto
      poll: 1
      when: install_jenkins is true
      register: docker_compose_result
      retries: 3
      delay: 5
      until: docker_compose_result is success

    - name: "♻️ Check if jenkins.yml file exists"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/jenkins.yml"
      register: jenkins_file
      poll: 1

    - name: "♻️ Tear down Jenkins container if install_jenkins is false"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - jenkins.yml
        state: absent
      poll: 1
      when: install_jenkins is false and jenkins_file.stat.exists

    - name: "♻️ Wait for Jenkins container to be ready"
      ansible.builtin.wait_for:
        host: localhost
        port: 4441
        state: started
        delay: 10
        timeout: 300
      when: install_jenkins is true

    - name: "♻️ Install Java 17 for Jenkins CLI"
      ansible.builtin.package:
        name: openjdk-17-jre
        state: present
      when: install_jenkins is true

    - name: "♻️ Get initial admin password from Jenkins container"
      ansible.builtin.command:
        cmd: docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword
      register: initial_password
      when: install_jenkins is true
      changed_when: false
      failed_when: initial_password.rc != 0 or initial_password.stdout == ""

    - name: "♻️ Debug initial admin password"
      ansible.builtin.debug:
        msg: "Initial password: {{ initial_password.stdout }}"
      when: install_jenkins is true

    - name: "♻️ Download Jenkins CLI jar"
      ansible.builtin.uri:
        url: http://localhost:4441/jnlpJars/jenkins-cli.jar
        method: GET
        dest: /tmp/jenkins-cli.jar
        force: yes
        owner: root
        group: root
        mode: '0644'
        status_code: [200, 304]
      when: install_jenkins is true

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ RabbitMQ
    - name: "🐰 Generate rabbitmq.yml from template"
      ansible.builtin.template:
        src: template/rabbitmq.yml.j2
        dest: tools/rabbitmq.yml
        owner: root
        group: root
        mode: '0644'
        force: yes
      poll: 1
      when: install_rabbitmq is true

    - name: "🐰 Set up RabbitMQ using Docker Compose"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - rabbitmq.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_rabbitmq is true

    - name: "🐰 Enable RabbitMQ management plugin"
      community.docker.docker_container_exec:
        container: rabbitmq
        command: rabbitmq-plugins enable rabbitmq_management
      poll: 1
      when: install_rabbitmq is true

    - name: "🐰 Check if rabbitmq.yml file exists"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/rabbitmq.yml"
      register: rabbitmq_file
      poll: 1

    - name: "🐰 Tear down RabbitMQ container if install_rabbitmq is false"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - rabbitmq.yml
        state: absent
      poll: 1
      when: install_rabbitmq is false and rabbitmq_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Uptime Kuma
    - name: "⏰ Generate uptime_kuma.yml from template"
      ansible.builtin.template:
        src: template/uptime_kuma.yml.j2
        dest: tools/uptime_kuma.yml
        owner: root
        group: root
        mode: '0644'
        force: yes
      poll: 1
      when: install_uptime_kuma is true

    - name: "⏰ Set up Uptime Kuma using Docker Compose"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - uptime_kuma.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_uptime_kuma is true

    - name: "⏰ Check if uptime_kuma.yml file exists"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/uptime_kuma.yml"
      register: uptime_kuma_file
      poll: 1

    - name: "⏰ Tear down Uptime Kuma container if install_uptime_kuma is false"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - uptime_kuma.yml
        state: absent
      poll: 1
      when: install_uptime_kuma is false and uptime_kuma_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Grafana
    - name: "📈 Copy Grafana config folder"
      ansible.builtin.copy:
        src: template/grafana/
        dest: tools/grafana/
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_grafana is true

    - name: "📈 Generate grafana.yml from template"
      ansible.builtin.template:
        src: template/grafana.yml.j2
        dest: tools/grafana.yml
        owner: root
        group: root
        mode: '0644'
        force: yes
      poll: 1
      when: install_grafana is true

    - name: "📈 Set up Grafana using Docker Compose"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - grafana.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_grafana is true

    - name: "📈 Check if grafana.yml file exists"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/grafana.yml"
      register: grafana_file
      poll: 1

    - name: "📈 Tear down Grafana container if install_grafana is false"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - grafana.yml
        state: absent
      poll: 1
      when: install_grafana is false and grafana_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Nginx
    - name: "🌐 Copy Nginx config folder"
      ansible.builtin.copy:
        src: template/nginx/
        dest: tools/nginx/
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_nginx is true

    - name: "🌐 Generate nginx.yml from template"
      ansible.builtin.template:
        src: template/nginx.yml.j2
        dest: tools/nginx.yml
        owner: root
        group: root
        mode: '0644'
        force: yes
      poll: 1
      when: install_nginx is true

    - name: "🌐 Set up Nginx using Docker Compose"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - nginx.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_nginx is true

    - name: "🌐 Check if nginx.yml file exists"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/nginx.yml"
      register: nginx_file
      poll: 1

    - name: "🌐 Tear down nginx container if install_nginx is false"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - nginx.yml
        state: absent
      poll: 1
      when: install_nginx is false and nginx_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ phpMyAdmin
    - name: "🗄️ Generate phpmyadmin.yml from template"
      ansible.builtin.template:
        src: template/phpmyadmin.yml.j2
        dest: tools/phpmyadmin.yml
        owner: root
        group: root
        mode: '0644'
        force: yes
      poll: 1
      when: install_phpmyadmin is true

    - name: "🗄️ Set up phpMyAdmin using Docker Compose"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - phpmyadmin.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_phpmyadmin is true

    - name: "🗄️ Check if phpmyadmin.yml file exists"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/phpmyadmin.yml"
      register: phpmyadmin_file
      poll: 1

    - name: "🗄️ Tear down phpMyAdmin container if install_phpmyadmin is false"
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - phpmyadmin.yml
        state: absent
      poll: 1
      when: install_phpmyadmin is false and phpmyadmin_file.stat.exists

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

