# کانفیگ و نصب ابزارهای سرور
- name: Configuring and installing server tools
  hosts: localhost
  become: true

  tasks:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ساخت پوشه برنامه
    # 📁 ایجاد پوشه project_path اگر وجود نداشت
    - name: "📁 Ensure project_path directory exists"
      ansible.builtin.file:
        path: "{{ project_path }}"
        state: directory
        mode: '0777'
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Bind9
    # 👥 اطمینان حاصل کنید که گروه 'bind' وجود دارد
    - name: "👥 Ensure group 'bind' exists"
      ansible.builtin.group:
        name: bind
        state: present
      poll: 1

    # 👤 از وجود 'bind' کاربر اطمینان حاصل کنید
    - name: "👤 Ensure user 'bind' exists"
      ansible.builtin.user:
        name: bind
        group: bind
        shell: /usr/sbin/nologin
        system: true
        state: present
      poll: 1

    # 🗃️ از وجود فهرست پیکربندی Bind9 اطمینان حاصل کنید
    - name: "🗃️ Ensure Bind9 config directory exists"
      ansible.builtin.file:
        path: "tools/etc/bind"
        state: directory
        mode: '0755'
      poll: 1

    # 🗄️ از وجود دایرکتوری های کش Bind9 و lib اطمینان حاصل کنید
    - name: "🗄️ Ensure Bind9 cache and lib directories exist"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "tools/var/cache/bind"
        - "tools/var/lib/bind"
      poll: 1

    - name: Set proper ownership for Bind9 directories
      ansible.builtin.file:
        path: "{{ item }}"
        owner: bind
        group: bind
        recurse: true
      loop:
        - "tools/var/cache/bind"
        - "tools/var/lib/bind"
      poll: 1

    - name: Generate Bind9 zone file from template
      ansible.builtin.template:
        src: template/zonefile.j2
        dest: "tools/etc/bind/db.{{ domain }}"
        owner: root
        group: root
        mode: '0644'
      vars:
        soa_email: "admin.{{ domain }}."
        ttl: 3600
        ns_record: "ns1.{{ domain }}."
        origin: "{{ domain }}"
      poll: 1

    - name: Template Bind9 named.conf
      ansible.builtin.template:
        src: template/bind9/named.conf.j2
        dest: tools/etc/bind/named.conf
        owner: root
        group: root
        mode: '0644'
      poll: 1

    - name: Generate bind9.yml from template
      ansible.builtin.template:
        src: template/bind9.yml.j2
        dest: tools/bind9.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1

    - name: Set up Bind9 using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - bind9.yml
        state: present
        pull: always
        recreate: auto
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Traefik
    - name: Create traefik_reverse_proxy Docker network
      community.docker.docker_network:
        name: traefik_reverse_proxy
        state: present
      poll: 1

    - name: Generate traefik.yml from template
      ansible.builtin.template:
        src: template/traefik.yml.j2
        dest: tools/traefik.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1

    - name: Set up Traefik using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - traefik.yml
        state: present
        pull: always
        recreate: auto
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Portainer
    - name: Generate portainer.yml from template
      ansible.builtin.template:
        src: template/portainer.yml.j2
        dest: tools/portainer.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_portainer is true

    - name: Set up Portainer using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - portainer.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_portainer is true

    - name: Check if portainer.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/portainer.yml"
      poll: 1
      register: portainer_file

    - name: Tear down Portainer container if install_portainer is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - portainer.yml
        state: absent
      poll: 1
      when: install_portainer is false and portainer_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SonarQube
    - name: Generate sonarqube.yml from template
      ansible.builtin.template:
        src: template/sonarqube.yml.j2
        dest: tools/sonarqube.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_sonarqube is true

    - name: Set up SonarQube using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - sonarqube.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_sonarqube is true

    - name: Check if sonarqube.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/sonarqube.yml"
      poll: 1
      register: sonarqube_file

    - name: Tear down SonarQube container if install_sonarqube is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - sonarqube.yml
        state: absent
      poll: 1
      when: install_sonarqube is false and sonarqube_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Jenkins
    - name: Generate jenkins.yml from template
      ansible.builtin.template:
        src: template/jenkins.yml.j2
        dest: tools/jenkins.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_jenkins is true

    - name: Set up Jenkins using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - jenkins.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_jenkins is true

    - name: Check if jenkins.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/jenkins.yml"
      register: jenkins_file
      poll: 1

    - name: Tear down Jenkins container if install_jenkins is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - jenkins.yml
        state: absent
      poll: 1
      when: install_jenkins is false and jenkins_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Nexus
    - name: Generate nexus.yml from template
      ansible.builtin.template:
        src: template/nexus.yml.j2
        dest: tools/nexus.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_nexus is true

    - name: Set up Nexus using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - nexus.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_nexus is true

    - name: Check if nexus.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/nexus.yml"
      register: nexus_file
      poll: 1

    - name: Tear down Nexus container if install_nexus is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - nexus.yml
        state: absent
      poll: 1
      when: install_nexus is false and nexus_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ RabbitMQ
    - name: Generate rabbitmq.yml from template
      ansible.builtin.template:
        src: template/rabbitmq.yml.j2
        dest: tools/rabbitmq.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_rabbitmq is true

    - name: Set up RabbitMQ using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - rabbitmq.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_rabbitmq is true

    - name: Enable RabbitMQ management plugin
      community.docker.docker_container_exec:
        container: rabbitmq
        command: rabbitmq-plugins enable rabbitmq_management
      poll: 1
      when: install_rabbitmq is true

    - name: Check if rabbitmq.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/rabbitmq.yml"
      register: rabbitmq_file
      poll: 1

    - name: Tear down RabbitMQ container if install_rabbitmq is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - rabbitmq.yml
        state: absent
      poll: 1
      when: install_rabbitmq is false and rabbitmq_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Apprise
    - name: Generate apprise.yml from template
      ansible.builtin.template:
        src: template/apprise.yml.j2
        dest: tools/apprise.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_apprise is true

    - name: Set up Apprise using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - apprise.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_apprise is true

    - name: Check if apprise.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/apprise.yml"
      register: apprise_file
      poll: 1

    - name: Tear down Apprise container if install_apprise is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - apprise.yml
        state: absent
      poll: 1
      when: install_apprise is false and apprise_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Uptime Kuma
    - name: Generate uptime_kuma.yml from template
      ansible.builtin.template:
        src: template/uptime_kuma.yml.j2
        dest: tools/uptime_kuma.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_uptime_kuma is true

    - name: Set up Uptime Kuma using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - uptime_kuma.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_uptime_kuma is true

    - name: Check if uptime_kuma.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/uptime_kuma.yml"
      register: uptime_kuma_file
      poll: 1

    - name: Tear down Uptime Kuma container if install_uptime_kuma is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - uptime_kuma.yml
        state: absent
      poll: 1
      when: install_uptime_kuma is false and ruptime_kuma_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Splunk
    - name: Generate splunk.yml from template
      ansible.builtin.template:
        src: template/splunk.yml.j2
        dest: tools/splunk.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_splunk is true

    - name: Set up Splunk using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - splunk.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_splunk is true

    - name: Check if splunk.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/splunk.yml"
      register: splunk_file
      poll: 1

    - name: Tear down Splunk container if install_splunk is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - splunk.yml
        state: absent
      poll: 1
      when: install_splunk is false and splunk_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Grafana
    - name: Generate grafana.yml from template
      ansible.builtin.template:
        src: template/grafana.yml.j2
        dest: tools/grafana.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_grafana is true

    - name: Set up Grafana using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - grafana.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_grafana is true

    - name: Check if grafana.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/grafana.yml"
      register: grafana_file
      poll: 1

    - name: Tear down Grafana container if install_grafana is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - grafana.yml
        state: absent
      poll: 1
      when: install_grafana is false and grafana_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pometheus
    - name: Copy Prometheus config folder
      ansible.builtin.copy:
        src: template/prometheus/
        dest: tools/prometheus/
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_prometheus is true

    - name: Generate prometheus.yml from template
      ansible.builtin.template:
        src: template/prometheus.yml.j2
        dest: tools/prometheus.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_prometheus is true

    - name: Set up Pometheus using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - prometheus.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_prometheus is true

    - name: Check if prometheus.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/prometheus.yml"
      register: prometheus_file
      poll: 1

    - name: Tear down Pometheus container if install_prometheus is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - prometheus.yml
        state: absent
      poll: 1
      when: install_prometheus is false and prometheus_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Selenium
    - name: Copy Selenium config folder
      ansible.builtin.copy:
        src: template/selenium/
        dest: tools/selenium/
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_selenium is true

    - name: Generate selenium.yml from template
      ansible.builtin.template:
        src: template/selenium.yml.j2
        dest: tools/selenium.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_selenium is true

    - name: Set up Selenium using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - selenium.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_selenium is true

    - name: Check if selenium.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/selenium.yml"
      register: selenium_file
      poll: 1

    - name: Tear down Selenium container if install_selenium is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - selenium.yml
        state: absent
      poll: 1
      when: install_selenium is false and selenium_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Mailserver
    - name: Copy Mailserver config folder
      ansible.builtin.copy:
        src: template/mailserver/
        dest: tools/mailserver/
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_mailserver is true

    - name: Generate mailserver.yml from template
      ansible.builtin.template:
        src: template/mailserver.yml.j2
        dest: tools/mailserver.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_mailserver is true

    - name: Set up Mailserver using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - mailserver.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_mailserver is true

    - name: Check if mailserver.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/mailserver.yml"
      register: mailserver_file
      poll: 1

    - name: Tear down Mailserver container if install_mailserver is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - mailserver.yml
        state: absent
      poll: 1
      when: install_mailserver is false and mailserver_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Nginx
    - name: Copy Nginx config folder
      ansible.builtin.copy:
        src: template/nginx/
        dest: tools/nginx/
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_nginx is true

    - name: Generate nginx.yml from template
      ansible.builtin.template:
        src: template/nginx.yml.j2
        dest: tools/nginx.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_nginx is true

    - name: Set up Nginx using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - nginx.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_nginx is true

    - name: Check if nginx.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/nginx.yml"
      register: nginx_file
      poll: 1

    - name: Tear down nginx container if install_nginx is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - nginx.yml
        state: absent
      poll: 1
      when: install_nginx is false and nginx_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ phpMyAdmin
    - name: Generate phpmyadmin.yml from template
      ansible.builtin.template:
        src: template/phpmyadmin.yml.j2
        dest: tools/phpmyadmin.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_phpmyadmin is true

    - name: Set up phpMyAdmin using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - phpmyadmin.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_phpmyadmin is true

    - name: Check if phpmyadmin.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/phpmyadmin.yml"
      register: phpmyadmin_file
      poll: 1

    - name: Tear down phpMyAdmin container if install_phpmyadmin is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - phpmyadmin.yml
        state: absent
      poll: 1
      when: install_phpmyadmin is false and phpmyadmin_file.stat.exists

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PgAdmin
    - name: Generate pgadmin.yml from template
      ansible.builtin.template:
        src: template/pgadmin.yml.j2
        dest: tools/pgadmin.yml
        owner: root
        group: root
        mode: '0644'
      poll: 1
      when: install_pgadmin is true

    - name: Set up PgAdmin using Docker Compose
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - pgadmin.yml
        state: present
        pull: always
        recreate: auto
      poll: 1
      when: install_pgadmin is true

    - name: Check if pgadmin.yml file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/tools/pgadmin.yml"
      register: pgadmin_file
      poll: 1

    - name: Tear down PgAdmin container if install_pgadmin is false
      community.docker.docker_compose_v2:
        project_src: tools
        files:
          - pgadmin.yml
        state: absent
      poll: 1
      when: install_pgadmin is false and pgadmin_file.stat.exists
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    #  ELK            elk, , , 
