# 🚀 استقرار پروژه با Docker Compose، تنظیم دسترسی‌ها و اجرای درخواست‌ها
- name: "🚀 Deploy project with Docker Compose, set permissions, and send requests"
  hosts: all
  become: true

  vars:
    # مسیرهای پروژه
    backup_path: "{{ project_path }}/backup"     # مسیر بکاپ
    info_path: "{{ project_path }}/info"         # مسیر اطلاعات
    log_path: "{{ project_path }}/log"           # مسیر لاگ ها

    # اطلاعات دیتابیس مشتریان
    portal_database_type: "mysql"
    portal_mysql_root_password: "1234"
    portal_mysql_password: "1234"
    portal_mysql_user: "root"
    portal_mysql_db_name: "calibri_portal"
    pu: "root"
    pp: "1234"
    pd: "calibri_portal"

    gateway_database_type: "mysql"
    gateway_mysql_root_password: "1234"
    gateway_mysql_password: "1234"
    gateway_mysql_user: "calibri_gateway"
    gateway_mysql_db_name: "calibri_gateway"

  tasks:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ایجاد پوشه‌ها و فایل‌ها
    # ⚙️ ایجاد پوشه‌ها و فایل‌ها برای هر مشتری
    - name: "⚙️ Ensure main directories exist"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0777'
      when: customer_state == 'update'
      poll: 1
      loop:
        - "{{ project_path }}"
        - "{{ backup_path }}"
        - "{{ info_path }}"
        - "{{ log_path }}"

    # 🏗️ ایجاد پوشه مخصوص هر مشتری در مسیر پروژه‌ها
    - name: "🏗️ Ensure customer-specific directories exist in project_path"
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}"
        state: directory
        mode: '0777'
      when: customer_state == 'update'
      poll: 1

    # 🗄️ ایجاد پوشه مخصوص مشتری در مسیر پشتیبان‌ها
    - name: "🗄️ Ensure customer directories in backup_path exist"
      ansible.builtin.file:
        path: "{{ backup_path }}/{{ inventory_hostname }}"
        state: directory
        mode: '0777'
      when: customer_state == 'update'
      poll: 1

    # 🗃️ ایجاد پوشه‌های test و backup در log_path
    - name: "🗃️ Ensure directories for test and backup in log_path exist"
      ansible.builtin.file:
        path: "{{ log_path }}/{{ item }}"
        state: directory
        mode: '0777'
      when: customer_state == 'update'
      poll: 1
      loop:
        - "test"
        - "backup"

    # 📦 ایجاد پوشه‌های volumes و databases در info_path
    - name: "📦 Ensure directories for volumes and databases in info_path exist"
      ansible.builtin.file:
        path: "{{ info_path }}/{{ item }}"
        state: directory
        mode: '0777'
      when: customer_state == 'update'
      poll: 1
      loop:
        - "volumes"
        - "databases"

    # 🧪 برای هر مشتری یک فایل متنی در پوشه تست ایجاد کنید
    - name: "🧪 Create a text file in test folder for each customer"
      ansible.builtin.file:
        path: "{{ log_path }}/test/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0777'
      when: customer_state == 'update'
      poll: 1

    # 🛡️ برای هر مشتری یک فایل متنی در پوشه پشتیبان ایجاد کنید
    - name: "🛡️ Create a text file in backup folder for each customer"
      ansible.builtin.file:
        path: "{{ log_path }}/backup/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0777'
      when: customer_state == 'update'
      poll: 1

    # 📁 برای هر مشتری یک فایل متنی در پوشه volumes ایجاد کنید
    - name: "📁 Create a text file in volumes folder for each customer"
      ansible.builtin.file:
        path: "{{ info_path }}/volumes/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0777'
      when: customer_state == 'update'
      poll: 1

    # 📝 برای هر مشتری یک فایل متنی در پوشه پایگاه داده ایجاد کنید
    - name: "📝 Create a text file in databases folder for each customer"
      ansible.builtin.file:
        path: "{{ info_path }}/databases/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0777'
      when: customer_state == 'update'
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ مدیریت شکن برای گیت‌لب
    # 🌐 پیکربندی DNS سرویس Shecan در resolved.conf اگر منبع ریپو gitlab باشد
    - name: "🌐 Configure Shecan DNS in resolved.conf if repo_source is gitlab"
      ansible.builtin.copy:
        content: |
          # This file is part of systemd.
          #
          # systemd is free software; you can redistribute it and/or modify it
          # under the terms of the GNU Lesser General Public License as published by
          # the Free Software Foundation; either version 2.1 of the License, or
          # (at your option) any later version.

          [Resolve]
          DNS=178.22.122.100 185.51.200.2
          FallbackDNS=8.8.8.8
          #Domains=
          #LLMNR=yes
          #MulticastDNS=yes
          #DNSSEC=no
          #DNSOverTLS=no
          #Cache=yes
          #DNSStubListener=yes
          #ReadEtcHosts=yes
        dest: /etc/systemd/resolved.conf
        mode: '0644'
      when: repo_source == "gitlab" and customer_state == 'update'
      poll: 1

    # 🔄 ریستارت سرویس systemd-resolved در صورت استفاده از GitLab
    - name: "🔄 Restart systemd-resolved service if repo_source is gitlab"
      ansible.builtin.systemd:
        name: systemd-resolved
        state: restarted
      when: repo_source == "gitlab" and customer_state == 'update'
      poll: 1

    # 🔗 ایجاد لینک سمبلیک برای /etc/resolv.conf به /run/systemd/resolve/resolv.conf
    - name: "🔗 Create symbolic link for /etc/resolv.conf if repo_source is gitlab"
      ansible.builtin.file:
        src: /run/systemd/resolve/resolv.conf
        dest: /etc/resolv.conf
        state: link
        force: true
      when: repo_source == "gitlab" and customer_state == 'update'
      poll: 1

    # 🛠 تنظیم دستی DNSهای Shecan در /etc/resolv.conf (در صورت نیاز)
    - name: "🛠 Manually set Shecan DNS in /etc/resolv.conf if repo_source is gitlab"
      ansible.builtin.copy:
        content: |
          nameserver 178.22.122.100
          nameserver 185.51.200.2
        dest: /etc/resolv.conf
        mode: '0644'
      when: repo_source == "gitlab" and customer_state == 'update'
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ گیت
    # 🗂️ تعریف مخازن پروژه
    - name: "🗂️ Define project repositories"
      ansible.builtin.set_fact:
        projects:
          - name: "gateway"
            repo: >-
              {{ "git@gitlab.com:nasser-man/calibri.git" if repo_source == "gitlab"
                else "git@github.com:nasserman/calibri.git" }}
            folder: "gateway"
            branch_var: "customer_gateway_git_branches"
            tag_var: "customer_gateway_git_tags"
            compose_file: "docker-compose-gateway.yml.j2"

          - name: "portal"
            repo: >-
              {{ "git@gitlab.com:nasser-man/calibri-portal.git" if repo_source == "gitlab"
                else "git@github.com:nasserman/calibri-portal.git" }}
            folder: "portal"
            branch_var: "customer_portal_git_branches"
            tag_var: "customer_portal_git_tags"
            compose_file: "docker-compose-portal.yml.j2"

          - name: "portal-frontend"
            repo: >-
              {{ "git@gitlab.com:nasser-man/calibri-portal-frontend.git" if repo_source == "gitlab"
                else "git@github.com:nasserman/calibri-portal-frontend.git" }}
            folder: "portal-frontend"
            branch_var: "customer_portal_frontend_git_branches"
            tag_var: "customer_portal_frontend_git_tags"
            compose_file: "docker-compose-portal-frontend.yml.j2"

    # 🔍 بررسی وجود دایرکتوری مشتری
    - name: "🛠️ Check if customer base folder exists"
      ansible.builtin.stat:
        path: "{{ project_path }}/{{ inventory_hostname }}"
      register: customer_base_dir
      poll: 1
      when: customer_state == 'update'

    # 🛠️ ساخت دایرکتوری مشتری در صورت نیاز
    - name: Create a customer directory if needed
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}"
        state: directory
        mode: '0777'
      when: customer_state == 'update'
      poll: 1

    # 📂 ساخت دایرکتوری مشتری برای هر پروژه در صورت نیاز
    - name: "📂 Create a customer directory for each project if needed"
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}"
        state: directory
        mode: '0777'
      loop: "{{ projects }}"
      when: customer_state == 'update'
      poll: 1

    # 🧐 بررسی وجود پوشه مخزن مشتری (برای هر پروژه)
    - name: "🧐 Check if customer project repository exists"
      ansible.builtin.stat:
        path: "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}/.git"
      register: customer_repo_check_results
      loop: "{{ projects }}"
      when: customer_state == 'update'
      poll: 1
      delegate_to: localhost

    # 📦 واقعیت customer_repo_check را به عنوان یک فرهنگ لغت تنظیم کنید
    - name: "📦 Set customer_repo_check fact as a dictionary"
      ansible.builtin.set_fact:
        customer_repo_check: "{{ dict(customer_repo_check_results.results | map(attribute='item.folder') | list | zip(customer_repo_check_results.results)) }}"
      when: customer_state == 'update'
      poll: 1
      delegate_to: localhost

    # 🌱 کلون کردن ریپازیتوری‌ها فقط اگر git هنوز وجود ندارد
    - name: "🌱 Clone repositories (first ever deploy)"
      ansible.builtin.shell: |
        GIT_SSH_COMMAND="ssh -i {{ playbook_dir }}/id_rsa -o StrictHostKeyChecking=no" \
        git clone -b {{ vars[item.branch_var] | default('master') }} {{ item.repo }} {{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}
      args:
        chdir: "{{ project_path }}/{{ inventory_hostname }}"
      loop: "{{ projects }}"
      poll: 1
      when: customer_state == 'update' and not customer_repo_check[item.folder].stat.exists
      register: clone_result

    # 🔄 Pull کردن آخرین تغییرات اگر git وجود داشته باشد
    - name: "🔄 Pull repositories (subsequent runs)"
      ansible.builtin.shell: |
        cd {{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}
        git config user.email "samad.elmakchi@gmail.com"
        git config user.name "CI/CD Bot"
        GIT_SSH_COMMAND="ssh -i {{ playbook_dir }}/id_rsa -o StrictHostKeyChecking=no" \
        git pull --no-rebase origin {{ vars[item.branch_var] | default('master') }}
      loop: "{{ projects }}"
      when: customer_state == 'update' and customer_repo_check[item.folder].stat.exists
      register: git_pull_result
      poll: 1
      changed_when: "'Already up to date' not in git_pull_result.stdout"

    # 🗑️ حذف فایل lock احتمالی
    - name: "🗑️ Remove git index.lock if exists in customer folder"
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}/.git/index.lock"
        state: absent
      loop: "{{ projects }}"
      when: customer_state == 'update'
      poll: 1
      delegate_to: localhost

    # ⚙️ مرحله نرمال‌سازی برنچ‌های نامعتبر
    - name: "⚙️ Normalize branch names if invalid"
      ansible.builtin.set_fact:
        normalized_branches: >-
          {{
            dict(
              projects | map(attribute='branch_var') | list |
              zip(
                projects
                | map(attribute='branch_var')
                | map('extract', hostvars[inventory_hostname])
                | map('regex_search', '^(dev|test|main|ahmadi|master)$')
                | map('default', 'main')
              )
            )
          }}
      poll: 1

    # 🚦 مرحله checkout: اگر tag مشخص شده بود، tag؛ در غیر اینصورت از normalized_branches استفاده کن
    - name: "🚦 Checkout specific tag or branch for each project"
      ansible.builtin.shell: |
        cd "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}"
        GIT_SSH_COMMAND="ssh -i {{ playbook_dir }}/id_rsa -o StrictHostKeyChecking=no" \
        git fetch --all --tags
        {% if hostvars[inventory_hostname][item.tag_var] | length > 0 %}
        GIT_SSH_COMMAND="ssh -i {{ playbook_dir }}/id_rsa -o StrictHostKeyChecking=no" \
        git checkout "{{ hostvars[inventory_hostname][item.tag_var] }}"
        {% else %}
        GIT_SSH_COMMAND="ssh -i {{ playbook_dir }}/id_rsa -o StrictHostKeyChecking=no" \
        git checkout "{{ normalized_branches[item.branch_var] }}"
        {% endif %}
      loop: "{{ projects }}"
      when: customer_state == 'update'
      delegate_to: localhost
      run_once: false
      poll: 1
      changed_when: false

    # 🔐 تنظیم پرمیشن برای هر پروژه
    - name: "🔐 Set permissions to 0777 for cloned repositories"
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}"
        state: directory
        mode: '0777'
      loop: "{{ projects }}"
      poll: 1
      when: customer_state == 'update'

    # 📋 کپی کردن فایل docker-compose اختصاصی
    - name: "📋 Copy docker-compose files to customer project"
      ansible.builtin.template:
        src: "template/{{ item.compose_file }}"
        dest: "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}/docker/docker-compose.yml"
        mode: '0777'
        force: yes
      loop: "{{ projects }}"
      poll: 1
      when: customer_state == 'update'

    # 📝 کپی کردن فایل nginx.conf اختصاصی
    - name: "📝 Copy nginx.conf files to customer project"
      ansible.builtin.template:
        src: "template/nginx.conf.j2"
        dest: "{{ project_path }}/{{ inventory_hostname }}/portal-frontend/docker/nginx.conf"
        mode: '0777'
        force: yes
      poll: 1
      when: customer_state == 'update'

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ غیر فعال کردن شکن برای گیت لب
    # 🌐 بازگرداندن DNS به حالت پیش‌فرض اگر گیت‌لب استفاده شده باشد
    - name: "🌐 Restore default DNS in resolved.conf if repo_source is gitlab"
      ansible.builtin.copy:
        content: |
          # This file is part of systemd.
          #
          # systemd is free software; you can redistribute it and/or modify it
          # under the terms of the GNU Lesser General Public License as published by
          # the Free Software Foundation; either version 2.1 of the License, or
          # (at your option) any later version.

          [Resolve]
          DNS=178.22.122.100 185.51.200.2
          #Domains=
          #LLMNR=yes
          #MulticastDNS=yes
          #DNSSEC=no
          #DNSOverTLS=no
          #Cache=yes
          #DNSStubListener=yes
          #ReadEtcHosts=yes
        dest: /etc/systemd/resolved.conf
        mode: '0644'
      when: repo_source == "gitlab" and customer_state == 'update'
      poll: 1
      become: true

    # 🔄 اگر repo_source روی gitlab باشد، سرویس systemd-resolved را پس از بازیابی DNS پیش‌فرض، مجدداً راه‌اندازی کنید.
    - name: "🔄 Restart systemd-resolved service after restoring default DNS if repo_source is gitlab"
      ansible.builtin.systemd:
        name: systemd-resolved
        state: restarted
      when: repo_source == "gitlab" and customer_state == 'update'
      poll: 1
      become: true

    # 🔗 اگر repo_source برابر با gitlab باشد، پس از بازیابی DNS پیش‌فرض، لینک نمادین برای /etc/resolv.conf ایجاد کنید.
    - name: "🔗 Create symbolic link for /etc/resolv.conf after restoring default DNS if repo_source is gitlab"
      ansible.builtin.file:
        src: /run/systemd/resolve/resolv.conf
        dest: /etc/resolv.conf
        state: link
        force: true
      when: repo_source == "gitlab" and customer_state == 'update'
      poll: 1
      become: true

    # 🛠 اگر repo_source روی gitlab است، DNS پیش‌فرض را به صورت دستی در /etc/resolv.conf تنظیم کنید
    - name: "🛠 Manually set default DNS in /etc/resolv.conf if repo_source is gitlab"
      ansible.builtin.copy:
        content: |
          nameserver 178.22.122.100
          nameserver 185.51.200.2
        dest: /etc/resolv.conf
        mode: '0644'
      when: repo_source == "gitlab" and customer_state == 'update'
      poll: 1
      become: true

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ کپی فایل ها
    # 📂 ساخت دایرکتوری init برای gateway در صورت نیاز
    - name: "📂 Create gateway docker init directory if it does not exist"
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}/gateway/docker/init"
        state: directory
        mode: '0777'
      when: customer_state == 'update'
      poll: 1
      delegate_to: localhost

    # 🔎 بررسی کنید که آیا فایل SQL خاصی وجود دارد یا خیر
    - name: "🔎 Check if specific SQL file exists"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/sql/{{ inventory_hostname }}.sql"
      register: sql_file_check
      poll: 1
      delegate_to: localhost

    # 📤 فایل SQL مناسب را کپی کنید
    - name: "📤 Copy the appropriate SQL file"
      ansible.builtin.copy:
        src: "{{ sql_file_check.stat.exists | ternary(playbook_dir + '/sql/' + inventory_hostname + '.sql', playbook_dir + '/sql/default.sql') }}"
        dest: "{{ project_path }}/{{ inventory_hostname }}/gateway/docker/init/install.sql"
        mode: '0644'
      when: customer_state == 'update'
      poll: 1
      delegate_to: localhost

    # 🧩 بررسی وجود فایل ZIP مخصوص مشتری
    - name: "🧩 Check if specific ZIP file exists"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/sql/{{ inventory_hostname }}.zip"
      register: zip_file_check
      poll: 1
      delegate_to: localhost

    # 📦 اگر فایل ZIP وجود داشت، آن را اکسترکت کن
    - name: "📦 Unzip the specific ZIP file if it exists"
      ansible.builtin.unarchive:
        src: "{{ playbook_dir }}/sql/{{ inventory_hostname }}.zip"
        dest: "{{ project_path }}/{{ inventory_hostname }}/gateway/admin/uploads"
        remote_src: false
      when:
        - zip_file_check.stat.exists
        - customer_state == 'update'
      poll: 1
      delegate_to: localhost

    # 🧾 ایجاد فایل bashUrl.js برای portal-frontend
    - name: "🧾 Create file for portal-frontend project"
      ansible.builtin.copy:
        dest: "{{ project_path }}/{{ inventory_hostname }}/portal-frontend/baseUrl.js"
        content: |
          const baseUrl = 'https://{{ customer_subdomain_backendportal }}.{{ customer_domain }}';
          export default baseUrl;
        mode: '0777'
      when: customer_state == 'update'
      poll: 1
      changed_when: false

    # ⚙️ متغیرها را برای محتوای .env.local تنظیم کنید
    - name: "⚙️ Set variables for .env.local content"
      ansible.builtin.set_fact:
        database_url: "mysql://{{ pu }}:{{ pp }}@{{ customer_containers }}-portal-db:3306/{{ pd }}?serverVersion=10.11.2-MariaDB&charset=utf8mb4"
        base_url: "https://{{ customer_subdomain_gateway }}.{{ customer_domain }}"
      poll: 1
      when: customer_state == 'update'

    # 🌐 ایجاد فایل .env.local برای portal
    - name: "🌐 Create file for portal project"
      ansible.builtin.copy:
        dest: "{{ project_path }}/{{ inventory_hostname }}/portal/.env.local"
        content: |
          DATABASE_URL="{{ database_url }}"
          BASE_URL="{{ base_url }}"
        mode: '0777'  # سطح دسترسی مناسب برای فایل
      when: customer_state == 'update'
      poll: 1
      changed_when: false

    # 📝 ایجاد فایل my_database.php برای gateway
    - name: "📝 Create my_database.php for gateway"
      ansible.builtin.copy:
        dest: "{{ project_path }}/{{ inventory_hostname }}/gateway/admin/application/config/my_database.php"
        content: |
          <?php defined('BASEPATH') OR exit('No direct script access allowed');
          $active_group = 'default';
          $query_builder = TRUE;
          $db['default'] = array(
              'dsn'  => '',
              'hostname' => '{{ customer_containers }}-gateway-db',
              'username' => '{{ gateway_mysql_user }}',
              'password' => '{{ gateway_mysql_password }}',
              'database' => '{{ gateway_mysql_db_name }}',
              'dbdriver' => 'mysqli',
              'dbprefix' => '',
              'pconnect' => FALSE,
              'db_debug' => (ENVIRONMENT !== 'production'),
              'cache_on' => FALSE,
              'cachedir' => '',
              'char_set' => 'utf8',
              'dbcollat' => 'utf8_general_ci',
              'swap_pre' => '',
              'encrypt' => FALSE,
              'compress' => FALSE,
              'stricton' => FALSE,
              'failover' => array(),
              'save_queries' => TRUE
          );
        mode: '0777'
      when: customer_state == 'update'
      poll: 1
      changed_when: false

    # 🧷 ایجاد فایل my_config.php برای gateway
    - name: "🧷 Create my_config.php for gateway"
      ansible.builtin.copy:
        dest: "{{ project_path }}/{{ inventory_hostname }}/gateway/admin/application/config/my_config.php"
        content: |
          <?php defined('BASEPATH') OR exit('No direct script access allowed');
          $config['base_url'] = "https://{{ customer_subdomain_gateway }}.{{ customer_domain }}";
        mode: '0777'
      when: customer_state == 'update'
      poll: 1
      changed_when: false

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ بکاپ قبل از اجرا و ساخت شبکه
    # 🕵️ چک کردن وجود فایل backup_volumes.sh
    - name: "🕵️ Check if backup_volumes.sh exists"
      ansible.builtin.stat:
        path: "{{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
      register: backup_script
      poll: 1
      when: customer_state == 'update'

    # ▶️ اجرای اسکریپت بکاپ برای دیتابیس‌ها و ولوم‌ها تنها در صورتی که فایل موجود باشد
    - name: ▶️ heck if backup script exists
      ansible.builtin.stat:
        path: "{{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
      register: backup_script
      poll: 1
      when: customer_state == 'update'

    # 💾 اجرای اسکریپت پشتیبان برای حجم ها و پایگاه های داده
    - name: "💾 Run backup script for volumes and databases"
      ansible.builtin.shell: |
        bash "{{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
      register: backup_result
      async: 1800 # حداکثر زمان برای اجرای اسکریپت (۳۰ دقیقه)
      poll: 1
      when: backup_script.stat.exists and customer_state == 'update'
      changed_when: true

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ اجرای داکر کامپوزر gateway
    # 🧩 یافتن همه کانتینرهای مرتبط با سرویس gateway
    - name: "🧩 Find all matching containers for gateway"
      ansible.builtin.shell: |
        docker ps -a --filter "name={{ customer_containers }}-gateway" --filter "name={{ customer_containers }}-gateway-db" -q
      register: matching_containers_gateway
      changed_when: false
      failed_when: false
      poll: 1
      when: customer_state in ['update', 'down']

    # 🛑 توقف کانتینرهای مرتبط با سرویس gateway
    - name: "🛑 Stop matching containers for gateway"
      ansible.builtin.shell: |
        docker stop {{ matching_containers_gateway.stdout_lines | join(' ') }}
      when: matching_containers_gateway.stdout != "" and customer_state in ['update', 'down']
      register: stop_result
      poll: 1
      failed_when: stop_result.rc != 0 and '"No such container"' not in stop_result.stderr
      changed_when: stop_result.stdout != ""

    # ❌ کشتن کانتینرهای باقی‌مانده (در صورت توقف نشدن) برای gateway
    - name: "❌ Kill matching containers (if not already stopped) for gateway"
      ansible.builtin.shell: |
        docker kill {{ matching_containers_gateway.stdout_lines | join(' ') }} || true
      when: matching_containers_gateway.stdout != "" and customer_state in ['update', 'down']
      register: kill_result
      failed_when: false
      poll: 1
      changed_when: "'is not running' not in kill_result.stderr and kill_result.stdout != ''"

    # 🧹 حذف کانتینرهای مرتبط با سرویس gateway
    - name: "🧹 Remove matching containers for gateway"
      ansible.builtin.shell: |
        docker rm {{ matching_containers_gateway.stdout_lines | join(' ') }}
      when: matching_containers_gateway.stdout != "" and customer_state in ['update', 'down']
      register: rm_result
      poll: 1
      failed_when: rm_result.rc != 0 and '"No such container"' not in rm_result.stderr
      changed_when: rm_result.stdout != ""

    # 🚀 اجرای docker-compose برای سرویس gateway
    - name: "🚀 Run docker-compose for gateway"
      ansible.builtin.command:
        cmd: docker compose -p {{ customer_containers }}-gateway -f "{{ project_path }}/{{ inventory_hostname }}/gateway/docker/docker-compose.yml" up -d
      # async: 1200
      poll: 1
      when: customer_state == 'update'
      register: docker_compose_job
      changed_when: false

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ اجرای داکر کامپوزر portal
    # 🧩 یافتن همه کانتینرهای مرتبط با سرویس portal
    - name: "🧩 Find all matching containers for portal"
      ansible.builtin.shell: |
        docker ps -a --filter "name={{ customer_containers }}-portal" --filter "name={{ customer_containers }}-portal-db" -q
      register: matching_containers_portal
      changed_when: false
      failed_when: false
      when: customer_state in ['update', 'down']
      poll: 1

    # 🛑 توقف کانتینرهای مرتبط با سرویس portal
    - name: "🛑 Stop matching containers for portal"
      ansible.builtin.shell: |
        docker stop {{ matching_containers_portal.stdout_lines | join(' ') }}
      when: matching_containers_portal.stdout != "" and customer_state in ['update', 'down']
      register: stop_result
      failed_when: stop_result.rc != 0 and '"No such container"' not in stop_result.stderr
      poll: 1
      changed_when: stop_result.stdout != ""

    # ❌ کشتن کانتینرهای باقی‌مانده (در صورت توقف نشدن) برای portal
    - name: "❌ Kill matching containers (if not already stopped) for portal"
      ansible.builtin.shell: |
        docker kill {{ matching_containers_portal.stdout_lines | join(' ') }} || true
      when: matching_containers_portal.stdout != "" and customer_state in ['update', 'down']
      register: kill_result
      failed_when: false
      poll: 1
      changed_when: "'is not running' not in kill_result.stderr and kill_result.stdout != ''"

    # 🧹 حذف کانتینرهای مرتبط با سرویس portal
    - name: "🧹 Remove matching containers for portal"
      ansible.builtin.shell: |
        docker rm {{ matching_containers_portal.stdout_lines | join(' ') }}
      when: matching_containers_portal.stdout != "" and customer_state in ['update', 'down']
      register: rm_result
      failed_when: rm_result.rc != 0 and '"No such container"' not in rm_result.stderr
      poll: 1
      changed_when: rm_result.stdout != ""

    # 🚀 اجرای docker-compose برای سرویس portal
    - name: "🚀 Run docker-compose for portal"
      ansible.builtin.command:
        cmd: docker compose -p {{ customer_containers }}-portal -f "{{ project_path }}/{{ inventory_hostname }}/portal/docker/docker-compose.yml" up -d
      when: customer_state == 'update'
      poll: 1
      changed_when: false

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ اجرای داکر کامپوزر portal-frontend
    # 🧩 یافتن همه کانتینرهای مرتبط با سرویس portal-frontend
    - name: "🧩 Find all matching containers for portal-frontend"
      ansible.builtin.shell: |
        docker ps -a --filter "name={{ customer_containers }}-portal-frontend" -q
      register: matching_containers_portal_frontend
      changed_when: false
      poll: 1
      failed_when: false
      when: customer_state in ['update', 'down']

    # 🛑 توقف کانتینرهای مرتبط با سرویس portal-frontend
    - name: "🛑 Stop matching containers for portal-frontend"
      ansible.builtin.shell: |
        docker stop {{ matching_containers_portal_frontend.stdout_lines | join(' ') }}
      when: matching_containers_portal_frontend.stdout != "" and customer_state in ['update', 'down']
      register: stop_result
      failed_when: stop_result.rc != 0 and '"No such container"' not in stop_result.stderr
      poll: 1
      changed_when: stop_result.stdout != ""

    # ❌ کشتن کانتینرهای باقی‌مانده (در صورت توقف نشدن) برای portal-frontend
    - name: "❌ Kill matching containers (if not already stopped) for portal-frontend"
      ansible.builtin.shell: |
        docker kill {{ matching_containers_portal_frontend.stdout_lines | join(' ') }} || true
      when: matching_containers_portal_frontend.stdout != "" and customer_state in ['update', 'down']
      register: kill_result
      failed_when: false
      poll: 1
      changed_when: "'is not running' not in kill_result.stderr and kill_result.stdout != ''"

    # 🧹 حذف کانتینرهای مرتبط با سرویس portal-frontend
    - name: "🧹 Remove matching containers for portal-frontend"
      ansible.builtin.shell: |
        docker rm {{ matching_containers_portal_frontend.stdout_lines | join(' ') }}
      when: matching_containers_portal_frontend.stdout != "" and customer_state in ['update', 'down']
      register: rm_result
      failed_when: rm_result.rc != 0 and '"No such container"' not in rm_result.stderr
      poll: 1
      changed_when: rm_result.stdout != ""

    # 🚀 اجرای docker-compose برای سرویس portal-frontend
    - name: 🚀 Run docker-compose for portal-frontend
      ansible.builtin.command:
        cmd: >
          docker compose -p {{ inventory_hostname }}-portal-frontend
          -f "{{ project_path }}/{{ inventory_hostname }}/portal-frontend/docker/docker-compose.yml"
          up -d
      when: customer_state == 'update'
      poll: 1
      changed_when: false

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ میگریشن در کانتینر پرتال و نصب کامپوزر
    # 🎼 اجرای دستور composer install داخل کانتینر
    - name: "🎼 Run composer install inside the container"
      community.docker.docker_container_exec:
        container: "{{ customer_containers }}-portal"
        command: composer install
      register: composer_output
      poll: 1
      when: customer_state == 'update'

    # 📜 نمایش خروجی اج"رای composer install
    - name: "📜 Show composer install output"
      ansible.builtin.debug:
        msg: |
          STDOUT:
          {{ composer_output.stdout }}
          STDERR:
          {{ composer_output.stderr }}
      when: customer_state == 'update'
      poll: 1

    # 🩺 بررسی وضعیت اجرای کانتینر دیتابیس
    - name: "🩺 Check if DB container is running"
      community.docker.docker_container_info:
        name: "{{ customer_containers }}-portal-db"
      register: db_container_info
      poll: 1
      when: customer_state == 'update'

    # 🔼 راه‌اندازی کانتینر دیتابیس در صورت اجرا نشدن
    - name: "🔼 Start the DB container if it's not running"
      community.docker.docker_container:
        name: "{{ customer_containers }}-portal-db"
        state: started
      when: not db_container_info.container.State.Running | default(false) and customer_state == 'update'
      poll: 1

    # 🛠 تلاش برای ایجاد دیتابیس در صورت عدم وجود
    - name: "🛠 Try to create database if it does not exist"
      community.docker.docker_container_exec:
        container: "{{ customer_containers }}-portal"
        command: php bin/console doctrine:database:create --env=prod --if-not-exists
      register: db_create_result
      ignore_errors: true
      poll: 1
      when: customer_state == 'update'

    # 🧬 اجرای مهاجرت‌های پایگاه‌داده اگر ساخت دیتابیس موفق بود یا نیاز نبود
    - name: "🧬 Run migrations if database creation succeeded or was skipped"
      community.docker.docker_container_exec:
        container: "{{ customer_containers }}-portal"
        command: php bin/console doctrine:migrations:migrate --no-interaction --env=prod
      when: customer_state == 'update' and db_create_result is not failed
      poll: 1

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ سایر
    # 📄 نوشتن لیست حجم‌های ایستا (Static Volumes) در فایل
    - name: "📄 Write static volume list to file"
      ansible.builtin.copy:
        content: |
          gateway/admin/uploads
          gateway/admin/captcha_images
          gateway/admin
          portal
          portal-frontend
        dest: "{{ info_path }}/volumes/{{ inventory_hostname }}.txt"
        mode: '0777'
      poll: 1
      when: customer_state == 'update'

    # 🟢 اطمینان از در حال اجرا بودن کانتینر
    - name: "🟢 Ensure container is running"
      community.docker.docker_container:
        name: "{{ customer_containers }}-gateway"
        state: started
      poll: 1
      when: customer_state == 'update'

    # ✍️ دادن سطح دسترسی نوشتن به پوشه‌های داخل کانتینر
    - name: "✍️ Grant write permissions to folders in the container"
      community.docker.docker_container_exec:
        container: "{{ customer_containers }}-gateway"
        command: "chmod -R 777 uploads captcha_images"
      when: customer_state == 'update'
      poll: 1

    # 📦 اجرای مهاجرت (migration) برای سرویس gateway
    - name: "📦 Migration for gateway"
      community.docker.docker_container_exec:
        container: "{{ customer_containers }}-gateway"
        command: "php index.php migrate index false"
      when: customer_state == 'update'
      poll: 1

    # 🧾 استخراج اطلاعات پایگاه‌داده برای هر مشتری
    - name: "🧾 Extract database information for each customer"
      ansible.builtin.shell: |
        # پاک کردن محتویات قبلی فایل
        > "{{ info_path }}/databases/{{ inventory_hostname }}.txt"

        # استخراج اطلاعات پایگاه داده‌ها از تنظیمات جدید Ansible
        DB_TYPE="{{ portal_database_type }}"
        DB_NAME="{{ portal_mysql_db_name }}"
        DB_USER="{{ portal_mysql_user }}"
        DB_PASSWORD="{{ portal_mysql_password }}"
        DB_HOST="{{ customer_containers }}-portal-db"
        echo "$DB_TYPE,$DB_NAME,$DB_USER,$DB_PASSWORD,$DB_HOST" > "{{ info_path }}/databases/{{ inventory_hostname }}.txt"

        DB_TYPE="{{ gateway_database_type }}"
        DB_NAME="{{ gateway_mysql_db_name }}"
        DB_USER="{{ gateway_mysql_user }}"
        DB_PASSWORD="{{ gateway_mysql_password }}"
        DB_HOST="{{ customer_containers }}-gateway-db"
        echo "$DB_TYPE,$DB_NAME,$DB_USER,$DB_PASSWORD,$DB_HOST" >> "{{ info_path }}/databases/{{ inventory_hostname }}.txt"
      register: db_info_result
      when: customer_state == 'update'
      poll: 1
      changed_when: false

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ بکاپ گرفتن
    # 📤 کپی کردن اسکریپت بکاپ فایل‌ها روی سرور
    - name: "📤 Copy volume backup script to the server"
      ansible.builtin.copy:
        content: |
          #!/bin/bash

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # مسیر بکاپ
          BACKUP_DIR="{{ backup_path }}/{{ inventory_hostname }}/$(date +'%Y-%m-%d-%H-%M-%S')"
          mkdir -p $BACKUP_DIR
          chmod 777 "$BACKUP_DIR"

          # فایل گزارش
          BACKUP_LOG="{{ log_path }}/backup/{{ inventory_hostname }}_volumes.txt"
          save_log "🚀 Volume backup started at $(date)"

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # بررسی فضای دیسک
          REQUIRED_SPACE_MB=100
          AVAILABLE_SPACE_MB=$(df "$BACKUP_DIR" | awk 'NR==2 {print int($4/1024)}')
          if (( AVAILABLE_SPACE_MB < REQUIRED_SPACE_MB )); then
            save_log "🖴❌ Not enough disk space. Required: ${REQUIRED_SPACE_MB}MB, Available: ${AVAILABLE_SPACE_MB}MB"
            exit 1
          fi

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # گرفتن لیست از ولوم‌ها از فایل مخصوص هر مشتری
          VOLUMES=$(head -n 1 {{ info_path }}/volumes/{{ inventory_hostname }}.txt)

          # مسیر پایه برای ولوم‌ها
          VOLUME_BASE="{{ project_path }}/{{ inventory_hostname }}"

          # پردازش هر مسیر در اون یک خط
          for VOLUME in $VOLUMES; do
            # اضافه کردن مسیر پایه
            FULL_VOLUME_PATH="$VOLUME_BASE/$VOLUME"

            # اطمینان از وجود پوشه
            if [ ! -d "$FULL_VOLUME_PATH" ]; then
              save_log "📁❌ Volume $FULL_VOLUME_PATH does not exist!"
              continue
            fi

            ARCHIVE_NAME=$(basename "$FULL_VOLUME_PATH")
            BACKUP_FILE="$BACKUP_DIR/$ARCHIVE_NAME.tar.gz"

            # بررسی دوباره وجود فایل بکاپ
            if [ -f "$BACKUP_FILE" ]; then
              save_log "📁❌ Backup file $BACKUP_FILE already exists. Skipping."
              continue
            fi

            # گرفتن بکاپ از پوشه با دستور tar
            save_log "📁 Starting backup for volume $FULL_VOLUME_PATH..."
            tar czf "$BACKUP_FILE" -C "$FULL_VOLUME_PATH" .

            # بررسی موفقیت آمیز بودن عملیات tar
            if [ $? -eq 0 ]; then
              save_log "📁✅ Backup for volume $FULL_VOLUME_PATH completed successfully at $(date)"
            else
              save_log "📁❌ Error during backup of volume $FULL_VOLUME_PATH"
            fi
          done

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          save_log "🏁 Volume backup completed at $(date)"
          save_log "----------------------------------------------------------------------------------"

          # تابع ذخیره لاگ
          save_log() {
            local message="$1"
            echo "$message" | tee -a "$BACKUP_LOG" | logger -t backup_volumes
          }
        dest: "{{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
        mode: '0777'  # اعطای دسترسی اجرایی به اسکریپت
      when: customer_state == 'update'
      poll: 1

    # 📤 کپی کردن اسکریپت بکاپ پایگاه داده‌ها روی سرور
    - name: "📤 Copy database backup script to the server"
      ansible.builtin.copy:
        content: |
          #!/bin/bash

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # مسیر بکاپ
          BACKUP_DIR="{{ backup_path }}/{{ inventory_hostname }}/$(date +'%Y-%m-%d-%H-%M-%S')"
          mkdir -p $BACKUP_DIR
          chmod 777 "$BACKUP_DIR"

          # فایل گزارش
          BACKUP_LOG="{{ log_path }}/backup/{{ inventory_hostname }}_databases.txt"
          save_log "🚀 Database backup started at $(date)"

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # بررسی فضای دیسک
          REQUIRED_SPACE_MB=100
          AVAILABLE_SPACE_MB=$(df "$BACKUP_DIR" | awk 'NR==2 {print int($4/1024)}')
          if (( AVAILABLE_SPACE_MB < REQUIRED_SPACE_MB )); then
            save_log "🖴❌ Not enough disk space. Required: ${REQUIRED_SPACE_MB}MB, Available: ${AVAILABLE_SPACE_MB}MB"
            exit 1
          fi

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # گرفتن لیست از دیتابیس‌ها از فایل مخصوص هر مشتری
          DATABASES="{{ info_path }}/databases/{{ inventory_hostname }}.txt"

          while IFS=',' read -r DB_TYPE DB_NAME DB_USER DB_PASSWORD DB_CONTAINER; do
            if [[ "$DB_TYPE" == "mysql" ]]; then
              BACKUP_FILE="$BACKUP_DIR/${DB_NAME}-mysql.sql.gz"
              save_log "🛢️ Backing up MySQL database $DB_NAME..."

              # استفاده از docker exec برای انجام عملیات در داخل کانتینر MySQL
              docker exec $DB_CONTAINER mysqldump -u "$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" 2>>"$BACKUP_LOG" | gzip > "$BACKUP_FILE"

              if [[ $? -eq 0 ]]; then
                chmod 0777 "$BACKUP_FILE"
                save_log "🛢️✅ MySQL backup for $DB_NAME completed at $(date)"
              else
                save_log "🛢️❌ Error backing up MySQL database $DB_NAME"
              fi

            elif [[ "$DB_TYPE" == "postgresql" ]]; then
              BACKUP_FILE="$BACKUP_DIR/${DB_NAME}-postgresql.sql.gz"
              save_log "🐘 Backing up PostgreSQL database $DB_NAME..."

              # استفاده از docker exec برای انجام عملیات در داخل کانتینر PostgreSQL
              docker exec $DB_CONTAINER pg_dump -U "$DB_USER" -h "$DB_HOST" -d "$DB_NAME" 2>>"$BACKUP_LOG" | gzip > "$BACKUP_FILE"

              if [[ $? -eq 0 ]]; then
                chmod 0777 "$BACKUP_FILE"
                save_log "🐘✅ PostgreSQL backup for $DB_NAME completed at $(date)"
              else
                save_log "🐘❌ Error backing up PostgreSQL database $DB_NAME"
              fi
            fi
          done < "$DATABASES"

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          save_log "🏁 Database backup completed at $(date)"
          save_log "----------------------------------------------------------------------------------"

          # تابع ذخیره لاگ
          save_log() {
            local message="$1"
            echo "$message" | tee -a "$BACKUP_LOG" | logger -t backup_databases
          }
        dest: "{{ backup_path }}/{{ inventory_hostname }}/backup_databases.sh"
        mode: '0777'  # اعطای دسترسی اجرایی به اسکریپت
      when: customer_state == 'update'
      poll: 1

    # ⏰ تنظیم زمان‌بندی اجرای بکاپ فایل‌ها با استفاده از cron
    - name: "⏰ Set up cron job for volume backup"
      ansible.builtin.cron:
        name: "Backup Docker Volumes"
        minute: "0"
        hour: "0"
        day: "*"
        weekday: "0"  # اجرای بکاپ فایل‌ها هر یکشنبه ساعت 00:00
        job: "/bin/bash {{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
        user: root
        state: present
      poll: 1
      when: customer_state == 'update'

    # ⏰ تنظیم زمان‌بندی اجرای بکاپ پایگاه داده‌ها با استفاده از cron
    - name: "⏰ Set up cron job for database backup"
      ansible.builtin.cron:
        name: "Backup Databases"
        minute: "30"
        hour: "0,8,16"  # اجرای بکاپ دیتابیس‌ها سه بار در روز (0:30، 8:30، 16:30)
        job: "/bin/bash {{ backup_path }}/{{ inventory_hostname }}/backup_databases.sh"
        user: root
        state: present
      poll: 1
      when: customer_state == 'update'
