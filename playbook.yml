# استقرار پروژه با Docker Compose، تنظیم دسترسی‌ها و اجرای درخواست‌ها
- name: Deploy project with Docker Compose, set permissions, and send requests
  hosts: all
  become: true

  vars:
    # مسیرهای پروژه
    backup_path: "{{ project_path }}/backup"     # مسیر بکاپ
    info_path: "{{ project_path }}/info"         # مسیر اطلاعات
    log_path: "{{ project_path }}/log"           # مسیر لاگ ها

    # اطلاعات دیتابیس مشتریان
    portal_database_type: "mysql"
    portal_mysql_root_password: "1234"
    portal_mysql_password: "1234"
    portal_mysql_user: "root"
    portal_mysql_db_name: "calibri_portal"
    pu: "root"
    pp: "1234"
    pd: "calibri_portal"

    gateway_database_type: "mysql"
    gateway_mysql_root_password: "1234"
    gateway_mysql_password: "1234"
    gateway_mysql_user: "calibri_gateway"
    gateway_mysql_db_name: "calibri_gateway"

  tasks:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ایجاد پوشه‌ها و فایل‌ها
    # ایجاد پوشه‌ها و فایل‌ها برای هر مشتری
    - name: Ensure main directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0777'
      poll: 1  # منتظر بمان تا عملیات کامل شود
      when: customer_state == 'update'
      loop:
        - "{{ project_path }}"
        - "{{ backup_path }}"
        - "{{ info_path }}"
        - "{{ log_path }}"

    # ایجاد پوشه مخصوص هر مشتری در مسیر پروژه‌ها
    - name: Ensure customer-specific directories exist in project_path
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}"
        state: directory
        mode: '0777'
      poll: 1
      when: customer_state == 'update'

    # ایجاد پوشه مخصوص مشتری در مسیر پشتیبان‌ها
    - name: Ensure customer directories in backup_path exist
      ansible.builtin.file:
        path: "{{ backup_path }}/{{ inventory_hostname }}"
        state: directory
        mode: '0777'
      poll: 1
      when: customer_state == 'update'

    # ایجاد پوشه‌های test و backup در log_path
    - name: Ensure directories for test and backup in log_path exist
      ansible.builtin.file:
        path: "{{ log_path }}/{{ item }}"
        state: directory
        mode: '0777'
      poll: 1
      when: customer_state == 'update'
      loop:
        - "test"
        - "backup"

    # ایجاد پوشه‌های volumes و databases در info_path
    - name: Ensure directories for volumes and databases in info_path exist
      ansible.builtin.file:
        path: "{{ info_path }}/{{ item }}"
        state: directory
        mode: '0777'
      poll: 1
      when: customer_state == 'update'
      loop:
        - "volumes"
        - "databases"

    # برای هر مشتری یک فایل متنی در پوشه تست ایجاد کنید
    - name: Create a text file in test folder for each customer
      ansible.builtin.file:
        path: "{{ log_path }}/test/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0777'
      poll: 1
      when: customer_state == 'update'

    # برای هر مشتری یک فایل متنی در پوشه پشتیبان ایجاد کنید
    - name: Create a text file in backup folder for each customer
      ansible.builtin.file:
        path: "{{ log_path }}/backup/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0777'
      poll: 1
      when: customer_state == 'update'

    # برای هر مشتری یک فایل متنی در پوشه volumes ایجاد کنید
    - name: Create a text file in volumes folder for each customer
      ansible.builtin.file:
        path: "{{ info_path }}/volumes/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0777'
      poll: 1
      when: customer_state == 'update'

    # برای هر مشتری یک فایل متنی در پوشه پایگاه داده ایجاد کنید
    - name: Create a text file in databases folder for each customer
      ansible.builtin.file:
        path: "{{ info_path }}/databases/{{ inventory_hostname }}.txt"
        state: touch
        mode: '0777'
      poll: 1
      when: customer_state == 'update'

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ گیت لب
    # تعریف پروژه‌ها و متادیتای هر کدام
    - name: Define project repositories
      ansible.builtin.set_fact:
        projects:
          - name: "gateway"
            repo: "git@gitlab.com:nasser-man/calibri.git"
            folder: "gateway"
            branch_var: "customer_gateway_git_branches"
            tag_var: "customer_gateway_git_tags"
            compose_file: "docker-compose-gateway.yml.j2"
          - name: "portal"
            repo: "git@gitlab.com:nasser-man/calibri-portal.git"
            folder: "portal"
            branch_var: "customer_portal_git_branches"
            tag_var: "customer_portal_git_tags"
            compose_file: "docker-compose-portal.yml.j2"
          - name: "portal-frontend"
            repo: "git@gitlab.com:nasser-man/calibri-portal-frontend.git"
            folder: "portal-frontend"
            branch_var: "customer_portal_frontend_git_branches"
            tag_var: "customer_portal_frontend_git_tags"
            compose_file: "docker-compose-portal-frontend.yml.j2"

    # بررسی وجود دایرکتوری git
    - name: Check if shared 'git' directory exists
      ansible.builtin.stat:
        path: "{{ project_path }}/git"
      register: git_dir_check

    # ساخت دایرکتوری git در صورت نیاز
    - name: Ensure 'git' directory exists
      ansible.builtin.file:
        path: "{{ project_path }}/git"
        state: directory
        mode: '0777'

    # کلون کردن ریپازیتوری‌ها فقط اگر git هنوز وجود ندارد
    - name: Clone repositories (first ever deploy)
      ansible.builtin.shell: |
        GIT_SSH_COMMAND="ssh -i {{ playbook_dir }}/id_rsa -o StrictHostKeyChecking=no" \
        git clone -b {{ vars[item.branch_var] | default('master') }} {{ item.repo }} {{ project_path }}/git/{{ item.folder }}
      args:
        creates: "{{ project_path }}/git/{{ item.folder }}"
      loop: "{{ projects }}"
      when: not git_dir_check.stat.exists and inventory_hostname == 'localhost'

    # Pull کردن آخرین تغییرات اگر git وجود داشته باشد
    - name: Pull repositories (subsequent runs)
      ansible.builtin.shell: |
        cd {{ project_path }}/git/{{ item.folder }}
        GIT_SSH_COMMAND="ssh -i {{ playbook_dir }}/id_rsa -o StrictHostKeyChecking=no" \
        git pull origin {{ vars[item.branch_var] | default('master') }}
      loop: "{{ projects }}"
      when: git_dir_check.stat.exists and inventory_hostname == 'localhost'
      register: git_pull_result
      changed_when: "'Already up to date' not in git_pull_result.stdout"

    # بررسی وجود دایرکتوری مشتری
    - name: Check if customer base folder exists
      ansible.builtin.stat:
        path: "{{ project_path }}/{{ inventory_hostname }}"
      register: customer_base_dir
      when: customer_state == 'update'

    # ساخت دایرکتوری مشتری در صورت نیاز
    - name: Ensure customer base folder exists
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}"
        state: directory
        mode: '0777'
      when: customer_state == 'update'

    # کپی تمام ریپازیتوری‌ها از git به مسیر مشتری
    - name: Copy all repositories from git to customer folder
      ansible.builtin.synchronize:
        src: "{{ project_path }}/git/"
        dest: "{{ project_path }}/{{ inventory_hostname }}/"
        recursive: true
      delegate_to: localhost
      when: customer_state == 'update' and not customer_base_dir.stat.exists

    # تنظیم پرمیشن برای هر پروژه
    - name: Set permissions to 0777 for copied repositories
      ansible.builtin.file:
        path: "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}"
        state: directory
        mode: '0777'
      loop: "{{ projects }}"
      when: customer_state == 'update'

    # Checkout کردن تگ اختصاصی برای هر پروژه
    - name: Checkout specific tag for each project
      ansible.builtin.shell: |
        cd "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}"
        git checkout "{{ vars[item.tag_var] }}"
      loop: "{{ projects }}"
      when: customer_state == 'update'
      changed_when: false

    # کپی کردن فایل docker-compose اختصاصی
    - name: Copy docker-compose files to customer project
      ansible.builtin.template:
        src: "template/{{ item.compose_file }}"
        dest: "{{ project_path }}/{{ inventory_hostname }}/{{ item.folder }}/docker/docker-compose.yml"
        mode: '0777'
      loop: "{{ projects }}"
      when: customer_state == 'update'

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ کپی فایل ها
    # ایجاد فایل bashUrl.js برای portal-frontend
    - name: Create file for portal-frontend project
      ansible.builtin.copy:
        dest: "{{ project_path }}/{{ inventory_hostname }}/portal-frontend/baseUrl.js"
        content: |
          const baseUrl = 'http://{{ inventory_hostname }}:{{ customer_portal_ports }}';
          export default baseUrl;
        mode: '0777'
      poll: 1
      when: customer_state == 'update'
      changed_when: false
      become: true

    # ایجاد فایل .env.local برای portal
    - name: Set variables for .env.local content
      ansible.builtin.set_fact:
        database_url: "mysql://{{ pu }}:{{ pp }}@{{ customer_containers }}-portal-db:3306/{{ pd }}?serverVersion=10.11.2-MariaDB&charset=utf8mb4"
        base_url: "http://{{ inventory_hostname }}:{{ customer_gateway_ports }}"
      poll: 1
      when: customer_state == 'update'

    # ایجاد فایل .env.local برای portal
    - name: Create file for portal project
      ansible.builtin.copy:
        dest: "{{ project_path }}/{{ inventory_hostname }}/portal/.env.local"
        content: |
          DATABASE_URL="{{ database_url }}"
          BASE_URL="{{ base_url }}"
        mode: '0777'  # سطح دسترسی مناسب برای فایل
      when: customer_state == 'update'
      changed_when: false
      poll: 1
      become: true

    # ایجاد فایل my_database.php برای gateway
    - name: Create my_database.php for gateway
      ansible.builtin.copy:
        dest: "{{ project_path }}/{{ inventory_hostname }}/gateway/admin/application/config/my_database.php"
        content: |
          <?php defined('BASEPATH') OR exit('No direct script access allowed');
          $active_group = 'default';
          $query_builder = TRUE;
          $db['default'] = array(
              'dsn'  => '',
              'hostname' => '{{ customer_containers }}-gateway-db',
              'username' => '{{ gateway_mysql_user }}',
              'password' => '{{ gateway_mysql_password }}',
              'database' => '{{ gateway_mysql_db_name }}',
              'dbdriver' => 'mysqli',
              'dbprefix' => '',
              'pconnect' => FALSE,
              'db_debug' => (ENVIRONMENT !== 'production'),
              'cache_on' => FALSE,
              'cachedir' => '',
              'char_set' => 'utf8',
              'dbcollat' => 'utf8_general_ci',
              'swap_pre' => '',
              'encrypt' => FALSE,
              'compress' => FALSE,
              'stricton' => FALSE,
              'failover' => array(),
              'save_queries' => TRUE
          );
        mode: '0777'
      when: customer_state == 'update'
      changed_when: false
      poll: 1
      become: true

    # ایجاد فایل my_config.php برای gateway
    - name: Create my_config.php for gateway
      ansible.builtin.copy:
        dest: "{{ project_path }}/{{ inventory_hostname }}/gateway/admin/application/config/my_config.php"
        content: |
          <?php defined('BASEPATH') OR exit('No direct script access allowed');
          $config['base_url'] = "http://{{ inventory_hostname }}:{{ customer_gateway_ports }}";
        mode: '0777'
      when: customer_state == 'update'
      changed_when: false
      poll: 1
      become: true

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ بکاپ قبل از اجرا و ساخت شبکه
    # چک کردن وجود فایل backup_volumes.sh
    - name: Check if backup_volumes.sh exists
      ansible.builtin.stat:
        path: "{{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
      register: backup_script
      when: customer_state == 'update'
      poll: 1

    # اجرای اسکریپت بکاپ برای دیتابیس‌ها و ولوم‌ها تنها در صورتی که فایل موجود باشد
    - name: Check if backup script exists
      ansible.builtin.stat:
        path: "{{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
      register: backup_script
      when: customer_state == 'update'

    - name: Run backup script for volumes and databases
      ansible.builtin.shell: |
        bash "{{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
      register: backup_result
      async: 1800 # حداکثر زمان برای اجرای اسکریپت (۳۰ دقیقه)
      poll: 1
      when: backup_script.stat.exists and customer_state == 'update'
      changed_when: true

    # ساخت شبکه مخصوص به هر مشتری
    - name: Create Docker network for each customer
      community.docker.docker_network:
        name: "{{ customer_network_names }}"
        state: present
      poll: 1
      when: customer_state == 'update'

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ اجرای داکر کامپوزر gateway
    # چک کردن وضعیت و اجرای docker-compose برای gateway
    - name: Find all matching containers for gateway
      ansible.builtin.shell: |
        docker ps -a --filter "name={{ customer_containers }}-gateway" --filter "name={{ customer_containers }}-gateway-db" -q
      register: matching_containers_gateway
      poll: 1
      changed_when: false
      failed_when: false
      when: customer_state in ['update', 'down']

    - name: Debug the output of matching_containers_gateway for gateway
      ansible.builtin.debug:
        var: matching_containers_gateway.stdout
      when: customer_state in ['update', 'down']

    - name: Stop matching containers for gateway
      ansible.builtin.shell: |
        docker stop {{ matching_containers_gateway.stdout_lines | join(' ') }}
      when: matching_containers_gateway.stdout != "" and customer_state in ['update', 'down']
      register: stop_result
      poll: 1
      failed_when: stop_result.rc != 0 and '"No such container"' not in stop_result.stderr
      changed_when: stop_result.stdout != ""

    - name: Kill matching containers (if not already stopped) for gateway
      ansible.builtin.shell: |
        docker kill {{ matching_containers_gateway.stdout_lines | join(' ') }} || true
      when: matching_containers_gateway.stdout != "" and customer_state in ['update', 'down']
      register: kill_result
      poll: 1
      failed_when: false
      changed_when: "'is not running' not in kill_result.stderr and kill_result.stdout != ''"

    - name: Remove matching containers for gateway
      ansible.builtin.shell: |
        docker rm {{ matching_containers_gateway.stdout_lines | join(' ') }}
      when: matching_containers_gateway.stdout != "" and customer_state in ['update', 'down']
      register: rm_result
      failed_when: rm_result.rc != 0 and '"No such container"' not in rm_result.stderr
      changed_when: rm_result.stdout != ""
      poll: 1

    - name: Run docker-compose for gateway
      ansible.builtin.command:
        cmd: docker compose -p {{ customer_containers }}-gateway -f "{{ project_path }}/{{ inventory_hostname }}/gateway/docker/docker-compose.yml" up -d
      async: 1200
      poll: 0
      when: customer_state == 'update'
      register: docker_compose_job
      changed_when: false

    - name: Wait for docker-compose to finish
      ansible.builtin.async_status:
        jid: "{{ docker_compose_job.ansible_job_id }}"
      register: docker_compose_result
      until: docker_compose_result.finished
      retries: 100
      delay: 10
      when: customer_state == 'update'

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ اجرای داکر کامپوزر portal
    # چک کردن وضعیت و اجرای docker-compose برای portal
    - name: Find all matching containers for portal
      ansible.builtin.shell: |
        docker ps -a --filter "name={{ customer_containers }}-portal" --filter "name={{ customer_containers }}-portal-db" -q
      register: matching_containers_portal
      poll: 1
      changed_when: false
      failed_when: false
      when: customer_state in ['update', 'down']

    - name: Debug the output of matching_containers_portal for portal
      ansible.builtin.debug:
        var: matching_containers_portal.stdout
      when: customer_state in ['update', 'down']

    - name: Stop matching containers for portal
      ansible.builtin.shell: |
        docker stop {{ matching_containers_portal.stdout_lines | join(' ') }}
      when: matching_containers_portal.stdout != "" and customer_state in ['update', 'down']
      register: stop_result
      poll: 1
      failed_when: stop_result.rc != 0 and '"No such container"' not in stop_result.stderr
      changed_when: stop_result.stdout != ""

    - name: Kill matching containers (if not already stopped) for portal
      ansible.builtin.shell: |
        docker kill {{ matching_containers_portal.stdout_lines | join(' ') }} || true
      when: matching_containers_portal.stdout != "" and customer_state in ['update', 'down']
      register: kill_result
      poll: 1
      failed_when: false
      changed_when: "'is not running' not in kill_result.stderr and kill_result.stdout != ''"

    - name: Remove matching containers for portal
      ansible.builtin.shell: |
        docker rm {{ matching_containers_portal.stdout_lines | join(' ') }}
      when: matching_containers_portal.stdout != "" and customer_state in ['update', 'down']
      register: rm_result
      failed_when: rm_result.rc != 0 and '"No such container"' not in rm_result.stderr
      changed_when: rm_result.stdout != ""
      poll: 1

    - name: Run docker-compose for portal
      ansible.builtin.command:
        cmd: docker compose -p {{ customer_containers }}-portal -f "{{ project_path }}/{{ inventory_hostname }}/portal/docker/docker-compose.yml" up -d
      when: customer_state == 'update'
      poll: 1
      changed_when: false

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ اجرای داکر کامپوزر portal-frontend
    # چک کردن وضعیت و اجرای docker-compose برای portal-frontend
    - name: Find all matching containers for portal-frontend
      ansible.builtin.shell: |
        docker ps -a --filter "name={{ customer_containers }}-portal-frontend" -q
      register: matching_containers_portal_frontend
      poll: 1
      changed_when: false
      failed_when: false
      when: customer_state in ['update', 'down']

    - name: Debug the output of matching_containers_portal_frontend for portal-frontend
      ansible.builtin.debug:
        var: matching_containers_portal_frontend.stdout
      when: customer_state in ['update', 'down']

    - name: Stop matching containers for portal-frontend
      ansible.builtin.shell: |
        docker stop {{ matching_containers_portal_frontend.stdout_lines | join(' ') }}
      when: matching_containers_portal_frontend.stdout != "" and customer_state in ['update', 'down']
      register: stop_result
      poll: 1
      failed_when: stop_result.rc != 0 and '"No such container"' not in stop_result.stderr
      changed_when: stop_result.stdout != ""

    - name: Kill matching containers (if not already stopped) for portal-frontend
      ansible.builtin.shell: |
        docker kill {{ matching_containers_portal_frontend.stdout_lines | join(' ') }} || true
      when: matching_containers_portal_frontend.stdout != "" and customer_state in ['update', 'down']
      register: kill_result
      poll: 1
      failed_when: false
      changed_when: "'is not running' not in kill_result.stderr and kill_result.stdout != ''"

    - name: Remove matching containers for portal-frontend
      ansible.builtin.shell: |
        docker rm {{ matching_containers_portal_frontend.stdout_lines | join(' ') }}
      when: matching_containers_portal_frontend.stdout != "" and customer_state in ['update', 'down']
      register: rm_result
      failed_when: rm_result.rc != 0 and '"No such container"' not in rm_result.stderr
      changed_when: rm_result.stdout != ""
      poll: 1

    - name: Run docker-compose for portal-frontend
      ansible.builtin.command:
        cmd: >
          docker compose -p {{ inventory_hostname }}-portal-frontend
          -f "{{ project_path }}/{{ inventory_hostname }}/portal-frontend/docker/docker-compose.yml"
          up -d
      when: customer_state == 'update'
      poll: 1
      changed_when: false

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ میگریشن در کانتینر پرتال و نصب کامپوزر
    - name: Run composer install inside the container
      community.docker.docker_container_exec:
        container: "{{ customer_containers }}-portal"
        command: composer install
      register: composer_output
      when: customer_state == 'update'

    - name: Show composer install output
      ansible.builtin.debug:
        msg: |
          STDOUT:
          {{ composer_output.stdout }}
          STDERR:
          {{ composer_output.stderr }}
      when: customer_state == 'update'

    - name: Check if DB container is running
      community.docker.docker_container_info:
        name: "{{ customer_containers }}-portal-db"
      register: db_container_info
      when: customer_state == 'update'

    - name: Start the DB container if it's not running
      community.docker.docker_container:
        name: "{{ customer_containers }}-portal-db"
        state: started
      when: not db_container_info.container.State.Running | default(false) and customer_state == 'update'

    - name: Try to create database if it does not exist
      community.docker.docker_container_exec:
        container: "{{ customer_containers }}-portal"
        command: php bin/console doctrine:database:create --env=prod --if-not-exists
      register: db_create_result
      ignore_errors: true
      when: customer_state == 'update'

    - name: Run migrations if database creation succeeded or was skipped
      community.docker.docker_container_exec:
        container: "{{ customer_containers }}-portal"
        command: php bin/console doctrine:migrations:migrate --no-interaction --env=prod
      when: customer_state == 'update' and db_create_result is not failed

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ سایر
    # یافتن پوشه های ولوم از فایل داکر کامپوز
    - name: Write static volume list to file
      ansible.builtin.copy:
        content: |
          gateway/admin/uploads
          gateway/admin/captcha_images
          gateway/admin
          portal
          portal-frontend
        dest: "{{ info_path }}/volumes/{{ inventory_hostname }}.txt"
        mode: '0777'
      when: customer_state == 'update'

    # اعطای دسترسی نوشتن به پوشه‌ها در کانتینر کالیبری
    - name: Ensure container is running
      community.docker.docker_container:
        name: "{{ customer_containers }}-gateway"
        state: started
      poll: 1
      when: customer_state == 'update'

    - name: Grant write permissions to folders in the container
      community.docker.docker_container_exec:
        container: "{{ customer_containers }}-gateway"
        command: "chmod -R 777 uploads captcha_images"
      when: customer_state == 'update'
      poll: 1

    # میگریشن در کانتینر کالیبری
    - name: Migration for gateway
      community.docker.docker_container_exec:
        container: "{{ customer_containers }}-gateway"
        command: "php index.php migrate index false"
      when: customer_state == 'update'
      poll: 1

    # یافتن پایگاه داده‌ها برای هر مشتری و ذخیره در یک فایل متنی
    - name: Extract database information for each customer
      ansible.builtin.shell: |
        # پاک کردن محتویات قبلی فایل
        > "{{ info_path }}/databases/{{ inventory_hostname }}.txt"

        # استخراج اطلاعات پایگاه داده‌ها از تنظیمات جدید Ansible
        DB_TYPE="{{ portal_database_type }}"
        DB_NAME="{{ portal_mysql_db_name }}"
        DB_USER="{{ portal_mysql_user }}"
        DB_PASSWORD="{{ portal_mysql_password }}"
        DB_HOST="{{ customer_containers }}-portal-db"
        echo "$DB_TYPE,$DB_NAME,$DB_USER,$DB_PASSWORD,$DB_HOST" > "{{ info_path }}/databases/{{ inventory_hostname }}.txt"

        DB_TYPE="{{ gateway_database_type }}"
        DB_NAME="{{ gateway_mysql_db_name }}"
        DB_USER="{{ gateway_mysql_user }}"
        DB_PASSWORD="{{ gateway_mysql_password }}"
        DB_HOST="{{ customer_containers }}-gateway-db"
        echo "$DB_TYPE,$DB_NAME,$DB_USER,$DB_PASSWORD,$DB_HOST" >> "{{ info_path }}/databases/{{ inventory_hostname }}.txt"
      register: db_info_result
      poll: 1
      when: customer_state == 'update'
      changed_when: false

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ تست ها
    # # اجرای تست‌های یکپارچگی، مهاجرت، استفاده‌پذیری، بار و پایگاه داده برای همه مشتریان
    # - name: Run integration, migration, usability, load, and database tests for all customers
    #   ansible.builtin.shell: |
    #     cd "{{ project_path }}/test" && \
    #     python3 test_integration.py && \       # تست‌های یکپارچگی برای بررسی تعامل بخش‌های مختلف سیستم
    #     python3 test_migration.py && \         # تست‌های مهاجرت برای بررسی صحت فرآیند انتقال داده‌ها
    #     python3 usability_test.py && \         # تست‌های استفاده‌پذیری برای ارزیابی تجربه کاربری
    #     python3 test_load.py && \              # تست‌های بار برای بررسی رفتار سیستم تحت بار زیاد
    #     python3 database_test.py && \          # تست‌های پایگاه داده برای بررسی صحت داده‌ها و عملیات پایگاه داده
    #     python3 test_api.py && \               # تست‌هایی برای بررسی عملکرد و صحت API‌ها
    #     python3 test_performance.py && \       # تست‌های عملکردی برای ارزیابی سرعت و پاسخ‌دهی سیستم
    #     python3 test_security.py && \          # تست‌های امنیتی برای شناسایی آسیب‌پذیری‌ها و تهدیدات
    #     python3 test_smoke.py && \             # تست‌های دود برای اطمینان از اینکه سیستم به درستی راه‌اندازی شده است
    #     python3 test_acceptance.py && \        # تست‌های پذیرش برای بررسی اینکه سیستم نیازهای کاربر را برآورده می‌کند
    #     python3 test_reliability.py && \       # تست‌های قابلیت اطمینان برای ارزیابی پایداری و عملکرد سیستم
    #     python3 test_stress.py && \            # تست‌های استرس برای بررسی عملکرد سیستم تحت بارهای شدید
    #     python3 test_ui.py && \                # تست‌های رابط کاربری برای بررسی تعامل کاربر با سیستم
    #     python3 test_system.py && \            # تست‌های سیستم برای ارزیابی یکپارچگی کل سیستم
    #     python3 test_regression.py && \        # تست‌های رگرسیون برای اطمینان از اینکه تغییرات جدید باعث اختلال در عملکردهای قبلی نمی‌شود
    #   when: customer_state == 'update'
    #   poll: 1
    #   changed_when: true

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ بکاپ گرفتن
    # کپی کردن اسکریپت بکاپ به سرور
    - name: Copy backup script to the server
      ansible.builtin.copy:
        content: |
          #!/bin/bash

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # مسیر بکاپ
          BACKUP_DIR="{{ backup_path }}/{{ inventory_hostname }}/$(date +'%Y-%m-%d-%H-%M-%S')"
          mkdir -p $BACKUP_DIR
          chmod 777 "$BACKUP_DIR"

          # فایل گزارش
          BACKUP_LOG="{{ log_path }}/backup/{{ inventory_hostname }}.txt"
          log_to_fluentd "🚀 Backup started at $(date)"

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # بررسی فضای دیسک
          REQUIRED_SPACE_MB=100
          AVAILABLE_SPACE_MB=$(df "$BACKUP_DIR" | awk 'NR==2 {print int($4/1024)}')
          if (( AVAILABLE_SPACE_MB < REQUIRED_SPACE_MB )); then
            log_to_fluentd "🖴❌ Not enough disk space. Required: ${REQUIRED_SPACE_MB}MB, Available: ${AVAILABLE_SPACE_MB}MB"
            exit 1
          fi

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # گرفتن لیست از ولوم‌ها از فایل مخصوص هر مشتری
          VOLUMES=$(head -n 1 {{ info_path }}/volumes/{{ inventory_hostname }}.txt)

          # مسیر پایه برای ولوم‌ها
          VOLUME_BASE="{{ project_path }}/{{ inventory_hostname }}"

          # پردازش هر مسیر در اون یک خط
          for VOLUME in $VOLUMES; do
            # اضافه کردن مسیر پایه
            FULL_VOLUME_PATH="$VOLUME_BASE/$VOLUME"

            # اطمینان از وجود پوشه
            if [ ! -d "$FULL_VOLUME_PATH" ]; then
              log_to_fluentd "📁❌ Volume $FULL_VOLUME_PATH does not exist!"
              continue
            fi

            ARCHIVE_NAME=$(basename "$FULL_VOLUME_PATH")
            BACKUP_FILE="$BACKUP_DIR/$ARCHIVE_NAME.tar.gz"

            # بررسی دوباره وجود فایل بکاپ
            if [ -f "$BACKUP_FILE" ]; then
              log_to_fluentd "📁❌ Backup file $BACKUP_FILE already exists. Skipping."
              continue
            fi

            # گرفتن بکاپ از پوشه با دستور tar
            log_to_fluentd "📁 Starting backup for volume $FULL_VOLUME_PATH..."
            tar czf "$BACKUP_FILE" -C "$FULL_VOLUME_PATH" .

            # بررسی موفقیت آمیز بودن عملیات tar
            if [ $? -eq 0 ]; then
              log_to_fluentd "📁✅ Backup for volume $FULL_VOLUME_PATH completed successfully at $(date)"
            else
              log_to_fluentd "📁❌ Error during backup of volume $FULL_VOLUME_PATH"
            fi
          done

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # گرفتن لیست از دیتابیس‌ها از فایل مخصوص هر مشتری
          DATABASES="{{ info_path }}/databases/{{ inventory_hostname }}.txt"

          while IFS=',' read -r DB_TYPE DB_NAME DB_USER DB_PASSWORD DB_CONTAINER; do
            if [[ "$DB_TYPE" == "mysql" ]]; then
              BACKUP_FILE="$BACKUP_DIR/${DB_NAME}-mysql.sql.gz"
              log_to_fluentd "🛢️ Backing up MySQL database $DB_NAME..."

              # استفاده از docker exec برای انجام عملیات در داخل کانتینر MySQL
              docker exec $DB_CONTAINER mysqldump -u "$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" 2>>"$BACKUP_LOG" | gzip > "$BACKUP_FILE"

              if [[ $? -eq 0 ]]; then
                chmod 0777 "$BACKUP_FILE"
                log_to_fluentd "🛢️✅ MySQL backup for $DB_NAME completed at $(date)"
              else
                log_to_fluentd "🛢️❌ Error backing up MySQL database $DB_NAME"
              fi

            elif [[ "$DB_TYPE" == "postgresql" ]]; then
              BACKUP_FILE="$BACKUP_DIR/${DB_NAME}-postgresql.sql.gz"
              log_to_fluentd "🐘 Backing up PostgreSQL database $DB_NAME..."

              # استفاده از docker exec برای انجام عملیات در داخل کانتینر PostgreSQL
              docker exec $DB_CONTAINER pg_dump -U "$DB_USER" -h "$DB_HOST" -d "$DB_NAME" 2>>"$BACKUP_LOG" | gzip > "$BACKUP_FILE"

              if [[ $? -eq 0 ]]; then
                chmod 0777 "$BACKUP_FILE"
                log_to_fluentd "🐘✅ PostgreSQL backup for $DB_NAME completed at $(date)"
              else
                log_to_fluentd "🐘❌ Error backing up PostgreSQL database $DB_NAME"
              fi
            fi
          done < "$DATABASES"

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # ارسال فایل بکاپ به تلگرام
          # log_to_fluentd "📤 Sending backup files to Telegram..."
          # TELEGRAM_TOKEN="8104111863:AAG1Lic90mVzbFKbfOonWjh4oBZtEmCBQmY"
          # CHAT_ID="-1002529041410"
          # for FILE in "$BACKUP_DIR"/*.gz; do
          #   if [ -f "$FILE" ]; then
          #     RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendDocument" \
          #       -F document=@"$FILE" \
          #       -F chat_id="$CHAT_ID")
          #     if [[ "$RESPONSE" == *'"ok":true'* ]]; then
          #       log_to_fluentd "📤✅ Sent $FILE to Telegram"
          #     else
          #       log_to_fluentd "📤❌ Failed to send $FILE to Telegram"
          #     fi
          #   fi
          # done

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          # ارسال فایل به FTP
          # log_to_fluentd "🌐 Sending backup files to FTP..."
          # FTP_SERVER="ftp.example.com"
          # FTP_USER="ftp_username"
          # FTP_PASSWORD="ftp_password"
          # FTP_PATH="/backups/localhost"
          # for FILE in "$BACKUP_DIR"/*.gz; do
          #   if [ -f "$FILE" ]; then
          #     curl -s -T "$FILE" ftp://$FTP_SERVER$FTP_PATH/ --user "$FTP_USER:$FTP_PASSWORD"
          #     if [[ $? -eq 0 ]]; then
          #       log_to_fluentd "🌐✅ Sent $FILE to FTP at $(date)"log_to_fluentd "
          #     else
          #       log_to_fluentd "🌐❌ Error sending $FILE to FTP"
          #     fi
          #   fi
          # done

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          log_to_fluentd "🏁 Backup completed at $(date)"
          log_to_fluentd "----------------------------------------------------------------------------------"

          # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          log_to_fluentd() {
            local message="$1"
            local tag="${2:-backup.log}"  # تگ Fluentd (پیش‌فرض: backup.log)
            local fluentd_url="${3:-http://fluentd:9880/$tag}"

            echo "$message" | tee -a "$BACKUP_LOG" | logger -t backup_script

            # ارسال به fluentd از طریق in_http
            log_json=$(jq -n --arg msg "$message" '{log: $msg}')
            curl -s -X POST -H "Content-Type: application/json" -d "$log_json" "$fluentd_url" > /dev/null
          }


        dest: "{{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
        mode: '0777'  # اعطای دسترسی اجرایی به اسکریپت
      poll: 1
      when: customer_state == 'update'

    # تنظیم Cron job برای بکاپ
    - name: Set up cron job for backup
      ansible.builtin.cron:
        name: "Backup Docker Volumes and Databases"
        minute: "0"
        hour: "0,8,16"  # اجرای بکاپ سه بار در روز (0:00، 8:00، 16:00)
        job: "/bin/bash {{ backup_path }}/{{ inventory_hostname }}/backup_volumes.sh"
        user: root
        state: present  # این باعث می‌شود فقط اگر کرون جاب وجود نداشته باشد، تعریف شود
      poll: 1
      when: customer_state == 'update'
